{
    "sourceFile": "gbv_project/reports/permissions.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1755848273993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755848281208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,10 @@\n+from \r\n+\r\n+class IsAdminOrLawEnforcement(BasePermission):\r\n+    \"\"\"\r\n+    Allows access only to admin or law enforcement users.\r\n+    Assumes your User model has a `role` field.\r\n+    \"\"\"\r\n+\r\n+    def has_permission(self, request, view):\r\n+        return request.user.is_authenticated and request.user.role in [\"admin\", \"law_enforcement\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755848286817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,10 @@\n+from rest_framework.p\r\n+\r\n+class IsAdminOrLawEnforcement(BasePermission):\r\n+    \"\"\"\r\n+    Allows access only to admin or law enforcement users.\r\n+    Assumes your User model has a `role` field.\r\n+    \"\"\"\r\n+\r\n+    def has_permission(self, request, view):\r\n+        return request.user.is_authenticated and request.user.role in [\"admin\", \"law_enforcement\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755848292558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,10 @@\n+from rest_framework.permissions import B\r\n+\r\n+class IsAdminOrLawEnforcement(BasePermission):\r\n+    \"\"\"\r\n+    Allows access only to admin or law enforcement users.\r\n+    Assumes your User model has a `role` field.\r\n+    \"\"\"\r\n+\r\n+    def has_permission(self, request, view):\r\n+        return request.user.is_authenticated and request.user.role in [\"admin\", \"law_enforcement\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755848397569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,10 @@\n+from rest_framework.permissions import BasePermission\r\n+\r\n+class IsAdminOrLawEnforcement(BasePermission):\r\n+    \"\"\"\r\n+    Allows access only to admin or law enforcement users.\r\n+    Assumes your User model has a `role` field.\r\n+    \"\"\"\r\n+\r\n+    def has_permission(self, request, view):\r\n+        return request.user.is_authenticated and request.user.role in [\"admin\", \"lawyer\"]\n\\ No newline at end of file\n"
                }
            ],
            "date": 1755848273993,
            "name": "Commit-0",
            "content": "class IsAdminOrLawEnforcement(BasePermission):\r\n    \"\"\"\r\n    Allows access only to admin or law enforcement users.\r\n    Assumes your User model has a `role` field.\r\n    \"\"\"\r\n\r\n    def has_permission(self, request, view):\r\n        return request.user.is_authenticated and request.user.role in [\"admin\", \"law_enforcement\"]"
        }
    ]
}