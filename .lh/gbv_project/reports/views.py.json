{
    "sourceFile": "gbv_project/reports/views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1752559273037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752582049858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,248 @@\n-from django.shortcuts import render\r\n-\r\n-# Create your views here.\r\n-from rest_framework.decorators import api_view\r\n-from rest_framework.response import Response\r\n-from rest_framework import status\r\n+from django.shortcuts import render, get_object_or_404\r\n+from django.http import JsonResponse\r\n+from django.views.decorators.csrf import csrf_exempt\r\n+from django.views.decorators.http import require_http_methods\r\n+from django.utils.decorators import method_decorator\r\n+from django.views import View\r\n+from django.core.exceptions import ValidationError\r\n+from django.core.validators import validate_email\r\n+import json\r\n+import string\r\n+import random\r\n+from datetime import datetime\r\n from .models import GBVReport\r\n-from .serializers import GBVReportSerializer\r\n \r\n-@api_view(['POST'])\r\n-def submit_report(request):\r\n-    serializer = GBVReportSerializer(data=request.data)\r\n-    if serializer.is_valid():\r\n-        serializer.save()\r\n-        return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n-    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n+def generate_reference_code():\r\n+    \"\"\"Generate a unique reference code for the report\"\"\"\r\n+    while True:\r\n+        code = 'GBV' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\r\n+        if not GBVReport.objects.filter(reference_code=code).exists():\r\n+            return code\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportView(View):\r\n+    \"\"\"Handle GBV report creation and retrieval\"\"\"\r\n+    \r\n+    def post(self, request):\r\n+        \"\"\"Create a new GBV report\"\"\"\r\n+        try:\r\n+            # Parse JSON data\r\n+            data = json.loads(request.body)\r\n+            \r\n+            # Validate required fields\r\n+            required_fields = [\r\n+                'name', 'email', 'phone', 'incident_date', \r\n+                'incident_location', 'incident_type', 'description'\r\n+            ]\r\n+            \r\n+            for field in required_fields:\r\n+                if not data.get(field):\r\n+                    return JsonResponse({\r\n+                        'error': f'{field.replace(\"_\", \" \").title()} is required'\r\n+                    }, status=400)\r\n+            \r\n+            # Validate email format\r\n+            try:\r\n+                validate_email(data['email'])\r\n+            except ValidationError:\r\n+                return JsonResponse({\r\n+                    'error': 'Please provide a valid email address'\r\n+                }, status=400)\r\n+            \r\n+            # Validate incident type\r\n+            valid_types = ['physical', 'sexual', 'emotional', 'economic', 'other']\r\n+            if data['incident_type'] not in valid_types:\r\n+                return JsonResponse({\r\n+                    'error': 'Invalid incident type'\r\n+                }, status=400)\r\n+            \r\n+            # Parse incident date\r\n+            try:\r\n+                incident_date = datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00'))\r\n+            except ValueError:\r\n+                return JsonResponse({\r\n+                    'error': 'Invalid date format'\r\n+                }, status=400)\r\n+            \r\n+            # Create the report\r\n+            report = GBVReport.objects.create(\r\n+                name=data['name'].strip(),\r\n+                email=data['email'].strip().lower(),\r\n+                phone=data['phone'].strip(),\r\n+                incident_date=incident_date,\r\n+                incident_location=data['incident_location'].strip(),\r\n+                incident_type=data['incident_type'],\r\n+                description=data['description'].strip(),\r\n+                immediate_danger=data.get('immediate_danger', False),\r\n+                needs_medical_attention=data.get('needs_medical_attention', False),\r\n+                reference_code=generate_reference_code()\r\n+            )\r\n+            \r\n+            # Return success response\r\n+            return JsonResponse({\r\n+                'success': True,\r\n+                'reference_code': report.reference_code,\r\n+                'message': 'Report submitted successfully',\r\n+                'report_id': report.id\r\n+            }, status=201)\r\n+            \r\n+        except json.JSONDecodeError:\r\n+            return JsonResponse({\r\n+                'error': 'Invalid JSON data'\r\n+            }, status=400)\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'An error occurred while processing your request'\r\n+            }, status=500)\r\n+    \r\n+    def get(self, request):\r\n+        \"\"\"Get all reports (for admin use)\"\"\"\r\n+        reports = GBVReport.objects.all().order_by('-date_reported')\r\n+        \r\n+        reports_data = []\r\n+        for report in reports:\r\n+            reports_data.append({\r\n+                'id': report.id,\r\n+                'reference_code': report.reference_code,\r\n+                'name': report.name,\r\n+                'incident_type': report.get_incident_type_display(),\r\n+                'incident_location': report.incident_location,\r\n+                'incident_date': report.incident_date.isoformat(),\r\n+                'immediate_danger': report.immediate_danger,\r\n+                'needs_medical_attention': report.needs_medical_attention,\r\n+                'date_reported': report.date_reported.isoformat(),\r\n+            })\r\n+        \r\n+        return JsonResponse({\r\n+            'reports': reports_data,\r\n+            'total_count': reports.count()\r\n+        })\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportDetailView(View):\r\n+    \"\"\"Handle individual report details\"\"\"\r\n+    \r\n+    def get(self, request, report_id):\r\n+        \"\"\"Get a specific report by ID\"\"\"\r\n+        try:\r\n+            report = get_object_or_404(GBVReport, id=report_id)\r\n+            \r\n+            return JsonResponse({\r\n+                'id': report.id,\r\n+                'reference_code': report.reference_code,\r\n+                'name': report.name,\r\n+                'email': report.email,\r\n+                'phone': report.phone,\r\n+                'incident_type': report.get_incident_type_display(),\r\n+                'incident_location': report.incident_location,\r\n+                'incident_date': report.incident_date.isoformat(),\r\n+                'description': report.description,\r\n+                'immediate_danger': report.immediate_danger,\r\n+                'needs_medical_attention': report.needs_medical_attention,\r\n+                'date_reported': report.date_reported.isoformat(),\r\n+            })\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'Report not found'\r\n+            }, status=404)\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportTrackingView(View):\r\n+    \"\"\"Handle report tracking by reference code\"\"\"\r\n+    \r\n+    def get(self, request, reference_code):\r\n+        \"\"\"Track a report using reference code\"\"\"\r\n+        try:\r\n+            report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n+            \r\n+            return JsonResponse({\r\n+                'report': {\r\n+                    'reference_code': report.reference_code,\r\n+                    'status_display': 'Submitted',  # You can add status field to model later\r\n+                    'created_at': report.date_reported.isoformat(),\r\n+                    'incident_type': report.get_incident_type_display(),\r\n+                    'incident_location': report.incident_location,\r\n+                    'immediate_danger': report.immediate_danger,\r\n+                    'needs_medical_attention': report.needs_medical_attention,\r\n+                },\r\n+                'can_create_account': False  # Can be updated based on your business logic\r\n+            })\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'Invalid reference code'\r\n+            }, status=404)\r\n+\r\n+# Function-based views (alternative approach)\r\n+@csrf_exempt\r\n+@require_http_methods([\"POST\"])\r\n+def create_gbv_report(request):\r\n+    \"\"\"Alternative function-based view for creating reports\"\"\"\r\n+    try:\r\n+        data = json.loads(request.body)\r\n+        \r\n+        # Validation logic (same as above)\r\n+        required_fields = ['name', 'email', 'phone', 'incident_date', 'incident_location', 'incident_type', 'description']\r\n+        \r\n+        for field in required_fields:\r\n+            if not data.get(field):\r\n+                return JsonResponse({'error': f'{field.replace(\"_\", \" \").title()} is required'}, status=400)\r\n+        \r\n+        # Create report\r\n+        report = GBVReport.objects.create(\r\n+            name=data['name'].strip(),\r\n+            email=data['email'].strip().lower(),\r\n+            phone=data['phone'].strip(),\r\n+            incident_date=datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00')),\r\n+            incident_location=data['incident_location'].strip(),\r\n+            incident_type=data['incident_type'],\r\n+            description=data['description'].strip(),\r\n+            immediate_danger=data.get('immediate_danger', False),\r\n+            needs_medical_attention=data.get('needs_medical_attention', False),\r\n+            reference_code=generate_reference_code()\r\n+        )\r\n+        \r\n+        return JsonResponse({\r\n+            'success': True,\r\n+            'reference_code': report.reference_code,\r\n+            'message': 'Report submitted successfully'\r\n+        }, status=201)\r\n+        \r\n+    except Exception as e:\r\n+        return JsonResponse({'error': 'An error occurred'}, status=500)\r\n+\r\n+@require_http_methods([\"GET\"])\r\n+def track_gbv_report(request, reference_code):\r\n+    \"\"\"Alternative function-based view for tracking reports\"\"\"\r\n+    try:\r\n+        report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n+        \r\n+        return JsonResponse({\r\n+            'report': {\r\n+                'reference_code': report.reference_code,\r\n+                'status_display': 'Submitted',\r\n+                'created_at': report.date_reported.isoformat(),\r\n+                'incident_type': report.get_incident_type_display(),\r\n+            },\r\n+            'can_create_account': False\r\n+        })\r\n+    except:\r\n+        return JsonResponse({'error': 'Invalid reference code'}, status=404)\r\n+\r\n+# Emergency contact view\r\n+@require_http_methods([\"GET\"])\r\n+def emergency_contacts(request):\r\n+    \"\"\"Return emergency contact information\"\"\"\r\n+    return JsonResponse({\r\n+        'contacts': [\r\n+            {\r\n+                'name': 'Police',\r\n+                'number': '999',\r\n+                'type': 'emergency'\r\n+            },\r\n+            {\r\n+                'name': 'GBV Hotline',\r\n+                'number': '1195',\r\n+                'type': 'support'\r\n+            }\r\n+        ]\r\n+    })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752644986711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n from django.views.decorators.csrf import csrf_exempt\r\n from django.views.decorators.http import require_http_methods\r\n from django.utils.decorators import method_decorator\r\n from django.views import View\r\n+\r\n from django.core.exceptions import ValidationError\r\n from django.core.validators import validate_email\r\n import json\r\n import string\r\n"
                },
                {
                    "date": 1752644993689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,249 @@\n+from django.shortcuts import render, get_object_or_404\r\n+from django.http import JsonResponse\r\n+from django.views.decorators.csrf import csrf_exempt\r\n+from django.views.decorators.http import require_http_methods\r\n+from django.utils.decorators import method_decorator\r\n+from django.views import View\r\n+from re\r\n+from django.core.exceptions import ValidationError\r\n+from django.core.validators import validate_email\r\n+import json\r\n+import string\r\n+import random\r\n+from datetime import datetime\r\n+from .models import GBVReport\r\n+\r\n+def generate_reference_code():\r\n+    \"\"\"Generate a unique reference code for the report\"\"\"\r\n+    while True:\r\n+        code = 'GBV' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\r\n+        if not GBVReport.objects.filter(reference_code=code).exists():\r\n+            return code\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportView(View):\r\n+    \"\"\"Handle GBV report creation and retrieval\"\"\"\r\n+    \r\n+    def post(self, request):\r\n+        \"\"\"Create a new GBV report\"\"\"\r\n+        try:\r\n+            # Parse JSON data\r\n+            data = json.loads(request.body)\r\n+            \r\n+            # Validate required fields\r\n+            required_fields = [\r\n+                'name', 'email', 'phone', 'incident_date', \r\n+                'incident_location', 'incident_type', 'description'\r\n+            ]\r\n+            \r\n+            for field in required_fields:\r\n+                if not data.get(field):\r\n+                    return JsonResponse({\r\n+                        'error': f'{field.replace(\"_\", \" \").title()} is required'\r\n+                    }, status=400)\r\n+            \r\n+            # Validate email format\r\n+            try:\r\n+                validate_email(data['email'])\r\n+            except ValidationError:\r\n+                return JsonResponse({\r\n+                    'error': 'Please provide a valid email address'\r\n+                }, status=400)\r\n+            \r\n+            # Validate incident type\r\n+            valid_types = ['physical', 'sexual', 'emotional', 'economic', 'other']\r\n+            if data['incident_type'] not in valid_types:\r\n+                return JsonResponse({\r\n+                    'error': 'Invalid incident type'\r\n+                }, status=400)\r\n+            \r\n+            # Parse incident date\r\n+            try:\r\n+                incident_date = datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00'))\r\n+            except ValueError:\r\n+                return JsonResponse({\r\n+                    'error': 'Invalid date format'\r\n+                }, status=400)\r\n+            \r\n+            # Create the report\r\n+            report = GBVReport.objects.create(\r\n+                name=data['name'].strip(),\r\n+                email=data['email'].strip().lower(),\r\n+                phone=data['phone'].strip(),\r\n+                incident_date=incident_date,\r\n+                incident_location=data['incident_location'].strip(),\r\n+                incident_type=data['incident_type'],\r\n+                description=data['description'].strip(),\r\n+                immediate_danger=data.get('immediate_danger', False),\r\n+                needs_medical_attention=data.get('needs_medical_attention', False),\r\n+                reference_code=generate_reference_code()\r\n+            )\r\n+            \r\n+            # Return success response\r\n+            return JsonResponse({\r\n+                'success': True,\r\n+                'reference_code': report.reference_code,\r\n+                'message': 'Report submitted successfully',\r\n+                'report_id': report.id\r\n+            }, status=201)\r\n+            \r\n+        except json.JSONDecodeError:\r\n+            return JsonResponse({\r\n+                'error': 'Invalid JSON data'\r\n+            }, status=400)\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'An error occurred while processing your request'\r\n+            }, status=500)\r\n+    \r\n+    def get(self, request):\r\n+        \"\"\"Get all reports (for admin use)\"\"\"\r\n+        reports = GBVReport.objects.all().order_by('-date_reported')\r\n+        \r\n+        reports_data = []\r\n+        for report in reports:\r\n+            reports_data.append({\r\n+                'id': report.id,\r\n+                'reference_code': report.reference_code,\r\n+                'name': report.name,\r\n+                'incident_type': report.get_incident_type_display(),\r\n+                'incident_location': report.incident_location,\r\n+                'incident_date': report.incident_date.isoformat(),\r\n+                'immediate_danger': report.immediate_danger,\r\n+                'needs_medical_attention': report.needs_medical_attention,\r\n+                'date_reported': report.date_reported.isoformat(),\r\n+            })\r\n+        \r\n+        return JsonResponse({\r\n+            'reports': reports_data,\r\n+            'total_count': reports.count()\r\n+        })\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportDetailView(View):\r\n+    \"\"\"Handle individual report details\"\"\"\r\n+    \r\n+    def get(self, request, report_id):\r\n+        \"\"\"Get a specific report by ID\"\"\"\r\n+        try:\r\n+            report = get_object_or_404(GBVReport, id=report_id)\r\n+            \r\n+            return JsonResponse({\r\n+                'id': report.id,\r\n+                'reference_code': report.reference_code,\r\n+                'name': report.name,\r\n+                'email': report.email,\r\n+                'phone': report.phone,\r\n+                'incident_type': report.get_incident_type_display(),\r\n+                'incident_location': report.incident_location,\r\n+                'incident_date': report.incident_date.isoformat(),\r\n+                'description': report.description,\r\n+                'immediate_danger': report.immediate_danger,\r\n+                'needs_medical_attention': report.needs_medical_attention,\r\n+                'date_reported': report.date_reported.isoformat(),\r\n+            })\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'Report not found'\r\n+            }, status=404)\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportTrackingView(View):\r\n+    \"\"\"Handle report tracking by reference code\"\"\"\r\n+    \r\n+    def get(self, request, reference_code):\r\n+        \"\"\"Track a report using reference code\"\"\"\r\n+        try:\r\n+            report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n+            \r\n+            return JsonResponse({\r\n+                'report': {\r\n+                    'reference_code': report.reference_code,\r\n+                    'status_display': 'Submitted',  # You can add status field to model later\r\n+                    'created_at': report.date_reported.isoformat(),\r\n+                    'incident_type': report.get_incident_type_display(),\r\n+                    'incident_location': report.incident_location,\r\n+                    'immediate_danger': report.immediate_danger,\r\n+                    'needs_medical_attention': report.needs_medical_attention,\r\n+                },\r\n+                'can_create_account': False  # Can be updated based on your business logic\r\n+            })\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'Invalid reference code'\r\n+            }, status=404)\r\n+\r\n+# Function-based views (alternative approach)\r\n+@csrf_exempt\r\n+@require_http_methods([\"POST\"])\r\n+def create_gbv_report(request):\r\n+    \"\"\"Alternative function-based view for creating reports\"\"\"\r\n+    try:\r\n+        data = json.loads(request.body)\r\n+        \r\n+        # Validation logic (same as above)\r\n+        required_fields = ['name', 'email', 'phone', 'incident_date', 'incident_location', 'incident_type', 'description']\r\n+        \r\n+        for field in required_fields:\r\n+            if not data.get(field):\r\n+                return JsonResponse({'error': f'{field.replace(\"_\", \" \").title()} is required'}, status=400)\r\n+        \r\n+        # Create report\r\n+        report = GBVReport.objects.create(\r\n+            name=data['name'].strip(),\r\n+            email=data['email'].strip().lower(),\r\n+            phone=data['phone'].strip(),\r\n+            incident_date=datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00')),\r\n+            incident_location=data['incident_location'].strip(),\r\n+            incident_type=data['incident_type'],\r\n+            description=data['description'].strip(),\r\n+            immediate_danger=data.get('immediate_danger', False),\r\n+            needs_medical_attention=data.get('needs_medical_attention', False),\r\n+            reference_code=generate_reference_code()\r\n+        )\r\n+        \r\n+        return JsonResponse({\r\n+            'success': True,\r\n+            'reference_code': report.reference_code,\r\n+            'message': 'Report submitted successfully'\r\n+        }, status=201)\r\n+        \r\n+    except Exception as e:\r\n+        return JsonResponse({'error': 'An error occurred'}, status=500)\r\n+\r\n+@require_http_methods([\"GET\"])\r\n+def track_gbv_report(request, reference_code):\r\n+    \"\"\"Alternative function-based view for tracking reports\"\"\"\r\n+    try:\r\n+        report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n+        \r\n+        return JsonResponse({\r\n+            'report': {\r\n+                'reference_code': report.reference_code,\r\n+                'status_display': 'Submitted',\r\n+                'created_at': report.date_reported.isoformat(),\r\n+                'incident_type': report.get_incident_type_display(),\r\n+            },\r\n+            'can_create_account': False\r\n+        })\r\n+    except:\r\n+        return JsonResponse({'error': 'Invalid reference code'}, status=404)\r\n+\r\n+# Emergency contact view\r\n+@require_http_methods([\"GET\"])\r\n+def emergency_contacts(request):\r\n+    \"\"\"Return emergency contact information\"\"\"\r\n+    return JsonResponse({\r\n+        'contacts': [\r\n+            {\r\n+                'name': 'Police',\r\n+                'number': '999',\r\n+                'type': 'emergency'\r\n+            },\r\n+            {\r\n+                'name': 'GBV Hotline',\r\n+                'number': '1195',\r\n+                'type': 'support'\r\n+            }\r\n+        ]\r\n+    })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752644998982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,249 @@\n+from django.shortcuts import render, get_object_or_404\r\n+from django.http import JsonResponse\r\n+from django.views.decorators.csrf import csrf_exempt\r\n+from django.views.decorators.http import require_http_methods\r\n+from django.utils.decorators import method_decorator\r\n+from django.views import View\r\n+from rest_framework.ap\r\n+from django.core.exceptions import ValidationError\r\n+from django.core.validators import validate_email\r\n+import json\r\n+import string\r\n+import random\r\n+from datetime import datetime\r\n+from .models import GBVReport\r\n+\r\n+def generate_reference_code():\r\n+    \"\"\"Generate a unique reference code for the report\"\"\"\r\n+    while True:\r\n+        code = 'GBV' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\r\n+        if not GBVReport.objects.filter(reference_code=code).exists():\r\n+            return code\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportView(View):\r\n+    \"\"\"Handle GBV report creation and retrieval\"\"\"\r\n+    \r\n+    def post(self, request):\r\n+        \"\"\"Create a new GBV report\"\"\"\r\n+        try:\r\n+            # Parse JSON data\r\n+            data = json.loads(request.body)\r\n+            \r\n+            # Validate required fields\r\n+            required_fields = [\r\n+                'name', 'email', 'phone', 'incident_date', \r\n+                'incident_location', 'incident_type', 'description'\r\n+            ]\r\n+            \r\n+            for field in required_fields:\r\n+                if not data.get(field):\r\n+                    return JsonResponse({\r\n+                        'error': f'{field.replace(\"_\", \" \").title()} is required'\r\n+                    }, status=400)\r\n+            \r\n+            # Validate email format\r\n+            try:\r\n+                validate_email(data['email'])\r\n+            except ValidationError:\r\n+                return JsonResponse({\r\n+                    'error': 'Please provide a valid email address'\r\n+                }, status=400)\r\n+            \r\n+            # Validate incident type\r\n+            valid_types = ['physical', 'sexual', 'emotional', 'economic', 'other']\r\n+            if data['incident_type'] not in valid_types:\r\n+                return JsonResponse({\r\n+                    'error': 'Invalid incident type'\r\n+                }, status=400)\r\n+            \r\n+            # Parse incident date\r\n+            try:\r\n+                incident_date = datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00'))\r\n+            except ValueError:\r\n+                return JsonResponse({\r\n+                    'error': 'Invalid date format'\r\n+                }, status=400)\r\n+            \r\n+            # Create the report\r\n+            report = GBVReport.objects.create(\r\n+                name=data['name'].strip(),\r\n+                email=data['email'].strip().lower(),\r\n+                phone=data['phone'].strip(),\r\n+                incident_date=incident_date,\r\n+                incident_location=data['incident_location'].strip(),\r\n+                incident_type=data['incident_type'],\r\n+                description=data['description'].strip(),\r\n+                immediate_danger=data.get('immediate_danger', False),\r\n+                needs_medical_attention=data.get('needs_medical_attention', False),\r\n+                reference_code=generate_reference_code()\r\n+            )\r\n+            \r\n+            # Return success response\r\n+            return JsonResponse({\r\n+                'success': True,\r\n+                'reference_code': report.reference_code,\r\n+                'message': 'Report submitted successfully',\r\n+                'report_id': report.id\r\n+            }, status=201)\r\n+            \r\n+        except json.JSONDecodeError:\r\n+            return JsonResponse({\r\n+                'error': 'Invalid JSON data'\r\n+            }, status=400)\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'An error occurred while processing your request'\r\n+            }, status=500)\r\n+    \r\n+    def get(self, request):\r\n+        \"\"\"Get all reports (for admin use)\"\"\"\r\n+        reports = GBVReport.objects.all().order_by('-date_reported')\r\n+        \r\n+        reports_data = []\r\n+        for report in reports:\r\n+            reports_data.append({\r\n+                'id': report.id,\r\n+                'reference_code': report.reference_code,\r\n+                'name': report.name,\r\n+                'incident_type': report.get_incident_type_display(),\r\n+                'incident_location': report.incident_location,\r\n+                'incident_date': report.incident_date.isoformat(),\r\n+                'immediate_danger': report.immediate_danger,\r\n+                'needs_medical_attention': report.needs_medical_attention,\r\n+                'date_reported': report.date_reported.isoformat(),\r\n+            })\r\n+        \r\n+        return JsonResponse({\r\n+            'reports': reports_data,\r\n+            'total_count': reports.count()\r\n+        })\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportDetailView(View):\r\n+    \"\"\"Handle individual report details\"\"\"\r\n+    \r\n+    def get(self, request, report_id):\r\n+        \"\"\"Get a specific report by ID\"\"\"\r\n+        try:\r\n+            report = get_object_or_404(GBVReport, id=report_id)\r\n+            \r\n+            return JsonResponse({\r\n+                'id': report.id,\r\n+                'reference_code': report.reference_code,\r\n+                'name': report.name,\r\n+                'email': report.email,\r\n+                'phone': report.phone,\r\n+                'incident_type': report.get_incident_type_display(),\r\n+                'incident_location': report.incident_location,\r\n+                'incident_date': report.incident_date.isoformat(),\r\n+                'description': report.description,\r\n+                'immediate_danger': report.immediate_danger,\r\n+                'needs_medical_attention': report.needs_medical_attention,\r\n+                'date_reported': report.date_reported.isoformat(),\r\n+            })\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'Report not found'\r\n+            }, status=404)\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportTrackingView(View):\r\n+    \"\"\"Handle report tracking by reference code\"\"\"\r\n+    \r\n+    def get(self, request, reference_code):\r\n+        \"\"\"Track a report using reference code\"\"\"\r\n+        try:\r\n+            report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n+            \r\n+            return JsonResponse({\r\n+                'report': {\r\n+                    'reference_code': report.reference_code,\r\n+                    'status_display': 'Submitted',  # You can add status field to model later\r\n+                    'created_at': report.date_reported.isoformat(),\r\n+                    'incident_type': report.get_incident_type_display(),\r\n+                    'incident_location': report.incident_location,\r\n+                    'immediate_danger': report.immediate_danger,\r\n+                    'needs_medical_attention': report.needs_medical_attention,\r\n+                },\r\n+                'can_create_account': False  # Can be updated based on your business logic\r\n+            })\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'Invalid reference code'\r\n+            }, status=404)\r\n+\r\n+# Function-based views (alternative approach)\r\n+@csrf_exempt\r\n+@require_http_methods([\"POST\"])\r\n+def create_gbv_report(request):\r\n+    \"\"\"Alternative function-based view for creating reports\"\"\"\r\n+    try:\r\n+        data = json.loads(request.body)\r\n+        \r\n+        # Validation logic (same as above)\r\n+        required_fields = ['name', 'email', 'phone', 'incident_date', 'incident_location', 'incident_type', 'description']\r\n+        \r\n+        for field in required_fields:\r\n+            if not data.get(field):\r\n+                return JsonResponse({'error': f'{field.replace(\"_\", \" \").title()} is required'}, status=400)\r\n+        \r\n+        # Create report\r\n+        report = GBVReport.objects.create(\r\n+            name=data['name'].strip(),\r\n+            email=data['email'].strip().lower(),\r\n+            phone=data['phone'].strip(),\r\n+            incident_date=datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00')),\r\n+            incident_location=data['incident_location'].strip(),\r\n+            incident_type=data['incident_type'],\r\n+            description=data['description'].strip(),\r\n+            immediate_danger=data.get('immediate_danger', False),\r\n+            needs_medical_attention=data.get('needs_medical_attention', False),\r\n+            reference_code=generate_reference_code()\r\n+        )\r\n+        \r\n+        return JsonResponse({\r\n+            'success': True,\r\n+            'reference_code': report.reference_code,\r\n+            'message': 'Report submitted successfully'\r\n+        }, status=201)\r\n+        \r\n+    except Exception as e:\r\n+        return JsonResponse({'error': 'An error occurred'}, status=500)\r\n+\r\n+@require_http_methods([\"GET\"])\r\n+def track_gbv_report(request, reference_code):\r\n+    \"\"\"Alternative function-based view for tracking reports\"\"\"\r\n+    try:\r\n+        report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n+        \r\n+        return JsonResponse({\r\n+            'report': {\r\n+                'reference_code': report.reference_code,\r\n+                'status_display': 'Submitted',\r\n+                'created_at': report.date_reported.isoformat(),\r\n+                'incident_type': report.get_incident_type_display(),\r\n+            },\r\n+            'can_create_account': False\r\n+        })\r\n+    except:\r\n+        return JsonResponse({'error': 'Invalid reference code'}, status=404)\r\n+\r\n+# Emergency contact view\r\n+@require_http_methods([\"GET\"])\r\n+def emergency_contacts(request):\r\n+    \"\"\"Return emergency contact information\"\"\"\r\n+    return JsonResponse({\r\n+        'contacts': [\r\n+            {\r\n+                'name': 'Police',\r\n+                'number': '999',\r\n+                'type': 'emergency'\r\n+            },\r\n+            {\r\n+                'name': 'GBV Hotline',\r\n+                'number': '1195',\r\n+                'type': 'support'\r\n+            }\r\n+        ]\r\n+    })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752645008056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,249 @@\n+from django.shortcuts import render, get_object_or_404\r\n+from django.http import JsonResponse\r\n+from django.views.decorators.csrf import csrf_exempt\r\n+from django.views.decorators.http import require_http_methods\r\n+from django.utils.decorators import method_decorator\r\n+from django.views import View\r\n+from rest_framework.viewsets import \r\n+from django.core.exceptions import ValidationError\r\n+from django.core.validators import validate_email\r\n+import json\r\n+import string\r\n+import random\r\n+from datetime import datetime\r\n+from .models import GBVReport\r\n+\r\n+def generate_reference_code():\r\n+    \"\"\"Generate a unique reference code for the report\"\"\"\r\n+    while True:\r\n+        code = 'GBV' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\r\n+        if not GBVReport.objects.filter(reference_code=code).exists():\r\n+            return code\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportView(View):\r\n+    \"\"\"Handle GBV report creation and retrieval\"\"\"\r\n+    \r\n+    def post(self, request):\r\n+        \"\"\"Create a new GBV report\"\"\"\r\n+        try:\r\n+            # Parse JSON data\r\n+            data = json.loads(request.body)\r\n+            \r\n+            # Validate required fields\r\n+            required_fields = [\r\n+                'name', 'email', 'phone', 'incident_date', \r\n+                'incident_location', 'incident_type', 'description'\r\n+            ]\r\n+            \r\n+            for field in required_fields:\r\n+                if not data.get(field):\r\n+                    return JsonResponse({\r\n+                        'error': f'{field.replace(\"_\", \" \").title()} is required'\r\n+                    }, status=400)\r\n+            \r\n+            # Validate email format\r\n+            try:\r\n+                validate_email(data['email'])\r\n+            except ValidationError:\r\n+                return JsonResponse({\r\n+                    'error': 'Please provide a valid email address'\r\n+                }, status=400)\r\n+            \r\n+            # Validate incident type\r\n+            valid_types = ['physical', 'sexual', 'emotional', 'economic', 'other']\r\n+            if data['incident_type'] not in valid_types:\r\n+                return JsonResponse({\r\n+                    'error': 'Invalid incident type'\r\n+                }, status=400)\r\n+            \r\n+            # Parse incident date\r\n+            try:\r\n+                incident_date = datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00'))\r\n+            except ValueError:\r\n+                return JsonResponse({\r\n+                    'error': 'Invalid date format'\r\n+                }, status=400)\r\n+            \r\n+            # Create the report\r\n+            report = GBVReport.objects.create(\r\n+                name=data['name'].strip(),\r\n+                email=data['email'].strip().lower(),\r\n+                phone=data['phone'].strip(),\r\n+                incident_date=incident_date,\r\n+                incident_location=data['incident_location'].strip(),\r\n+                incident_type=data['incident_type'],\r\n+                description=data['description'].strip(),\r\n+                immediate_danger=data.get('immediate_danger', False),\r\n+                needs_medical_attention=data.get('needs_medical_attention', False),\r\n+                reference_code=generate_reference_code()\r\n+            )\r\n+            \r\n+            # Return success response\r\n+            return JsonResponse({\r\n+                'success': True,\r\n+                'reference_code': report.reference_code,\r\n+                'message': 'Report submitted successfully',\r\n+                'report_id': report.id\r\n+            }, status=201)\r\n+            \r\n+        except json.JSONDecodeError:\r\n+            return JsonResponse({\r\n+                'error': 'Invalid JSON data'\r\n+            }, status=400)\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'An error occurred while processing your request'\r\n+            }, status=500)\r\n+    \r\n+    def get(self, request):\r\n+        \"\"\"Get all reports (for admin use)\"\"\"\r\n+        reports = GBVReport.objects.all().order_by('-date_reported')\r\n+        \r\n+        reports_data = []\r\n+        for report in reports:\r\n+            reports_data.append({\r\n+                'id': report.id,\r\n+                'reference_code': report.reference_code,\r\n+                'name': report.name,\r\n+                'incident_type': report.get_incident_type_display(),\r\n+                'incident_location': report.incident_location,\r\n+                'incident_date': report.incident_date.isoformat(),\r\n+                'immediate_danger': report.immediate_danger,\r\n+                'needs_medical_attention': report.needs_medical_attention,\r\n+                'date_reported': report.date_reported.isoformat(),\r\n+            })\r\n+        \r\n+        return JsonResponse({\r\n+            'reports': reports_data,\r\n+            'total_count': reports.count()\r\n+        })\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportDetailView(View):\r\n+    \"\"\"Handle individual report details\"\"\"\r\n+    \r\n+    def get(self, request, report_id):\r\n+        \"\"\"Get a specific report by ID\"\"\"\r\n+        try:\r\n+            report = get_object_or_404(GBVReport, id=report_id)\r\n+            \r\n+            return JsonResponse({\r\n+                'id': report.id,\r\n+                'reference_code': report.reference_code,\r\n+                'name': report.name,\r\n+                'email': report.email,\r\n+                'phone': report.phone,\r\n+                'incident_type': report.get_incident_type_display(),\r\n+                'incident_location': report.incident_location,\r\n+                'incident_date': report.incident_date.isoformat(),\r\n+                'description': report.description,\r\n+                'immediate_danger': report.immediate_danger,\r\n+                'needs_medical_attention': report.needs_medical_attention,\r\n+                'date_reported': report.date_reported.isoformat(),\r\n+            })\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'Report not found'\r\n+            }, status=404)\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportTrackingView(View):\r\n+    \"\"\"Handle report tracking by reference code\"\"\"\r\n+    \r\n+    def get(self, request, reference_code):\r\n+        \"\"\"Track a report using reference code\"\"\"\r\n+        try:\r\n+            report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n+            \r\n+            return JsonResponse({\r\n+                'report': {\r\n+                    'reference_code': report.reference_code,\r\n+                    'status_display': 'Submitted',  # You can add status field to model later\r\n+                    'created_at': report.date_reported.isoformat(),\r\n+                    'incident_type': report.get_incident_type_display(),\r\n+                    'incident_location': report.incident_location,\r\n+                    'immediate_danger': report.immediate_danger,\r\n+                    'needs_medical_attention': report.needs_medical_attention,\r\n+                },\r\n+                'can_create_account': False  # Can be updated based on your business logic\r\n+            })\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'Invalid reference code'\r\n+            }, status=404)\r\n+\r\n+# Function-based views (alternative approach)\r\n+@csrf_exempt\r\n+@require_http_methods([\"POST\"])\r\n+def create_gbv_report(request):\r\n+    \"\"\"Alternative function-based view for creating reports\"\"\"\r\n+    try:\r\n+        data = json.loads(request.body)\r\n+        \r\n+        # Validation logic (same as above)\r\n+        required_fields = ['name', 'email', 'phone', 'incident_date', 'incident_location', 'incident_type', 'description']\r\n+        \r\n+        for field in required_fields:\r\n+            if not data.get(field):\r\n+                return JsonResponse({'error': f'{field.replace(\"_\", \" \").title()} is required'}, status=400)\r\n+        \r\n+        # Create report\r\n+        report = GBVReport.objects.create(\r\n+            name=data['name'].strip(),\r\n+            email=data['email'].strip().lower(),\r\n+            phone=data['phone'].strip(),\r\n+            incident_date=datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00')),\r\n+            incident_location=data['incident_location'].strip(),\r\n+            incident_type=data['incident_type'],\r\n+            description=data['description'].strip(),\r\n+            immediate_danger=data.get('immediate_danger', False),\r\n+            needs_medical_attention=data.get('needs_medical_attention', False),\r\n+            reference_code=generate_reference_code()\r\n+        )\r\n+        \r\n+        return JsonResponse({\r\n+            'success': True,\r\n+            'reference_code': report.reference_code,\r\n+            'message': 'Report submitted successfully'\r\n+        }, status=201)\r\n+        \r\n+    except Exception as e:\r\n+        return JsonResponse({'error': 'An error occurred'}, status=500)\r\n+\r\n+@require_http_methods([\"GET\"])\r\n+def track_gbv_report(request, reference_code):\r\n+    \"\"\"Alternative function-based view for tracking reports\"\"\"\r\n+    try:\r\n+        report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n+        \r\n+        return JsonResponse({\r\n+            'report': {\r\n+                'reference_code': report.reference_code,\r\n+                'status_display': 'Submitted',\r\n+                'created_at': report.date_reported.isoformat(),\r\n+                'incident_type': report.get_incident_type_display(),\r\n+            },\r\n+            'can_create_account': False\r\n+        })\r\n+    except:\r\n+        return JsonResponse({'error': 'Invalid reference code'}, status=404)\r\n+\r\n+# Emergency contact view\r\n+@require_http_methods([\"GET\"])\r\n+def emergency_contacts(request):\r\n+    \"\"\"Return emergency contact information\"\"\"\r\n+    return JsonResponse({\r\n+        'contacts': [\r\n+            {\r\n+                'name': 'Police',\r\n+                'number': '999',\r\n+                'type': 'emergency'\r\n+            },\r\n+            {\r\n+                'name': 'GBV Hotline',\r\n+                'number': '1195',\r\n+                'type': 'support'\r\n+            }\r\n+        ]\r\n+    })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752645037585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,251 @@\n+from django.shortcuts import render, get_object_or_404\r\n+from django.http import JsonResponse\r\n+from django.views.decorators.csrf import csrf_exempt\r\n+from django.views.decorators.http import require_http_methods\r\n+from django.utils.decorators import method_decorator\r\n+from django.views import View\r\n+from rest_framework.viewsets import ModelViewSet\r\n+from django.core.exceptions import ValidationError\r\n+from django.core.validators import validate_email\r\n+import json\r\n+import string\r\n+import random\r\n+from datetime import datetime\r\n+from .models import GBVReport\r\n+\r\n+def generate_reference_code():\r\n+    \"\"\"Generate a unique reference code for the report\"\"\"\r\n+    while True:\r\n+        code = 'GBV' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\r\n+        if not GBVReport.objects.filter(reference_code=code).exists():\r\n+            return code\r\n+\r\n+\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportView(View):\r\n+    \"\"\"Handle GBV report creation and retrieval\"\"\"\r\n+    \r\n+    def post(self, request):\r\n+        \"\"\"Create a new GBV report\"\"\"\r\n+        try:\r\n+            # Parse JSON data\r\n+            data = json.loads(request.body)\r\n+            \r\n+            # Validate required fields\r\n+            required_fields = [\r\n+                'name', 'email', 'phone', 'incident_date', \r\n+                'incident_location', 'incident_type', 'description'\r\n+            ]\r\n+            \r\n+            for field in required_fields:\r\n+                if not data.get(field):\r\n+                    return JsonResponse({\r\n+                        'error': f'{field.replace(\"_\", \" \").title()} is required'\r\n+                    }, status=400)\r\n+            \r\n+            # Validate email format\r\n+            try:\r\n+                validate_email(data['email'])\r\n+            except ValidationError:\r\n+                return JsonResponse({\r\n+                    'error': 'Please provide a valid email address'\r\n+                }, status=400)\r\n+            \r\n+            # Validate incident type\r\n+            valid_types = ['physical', 'sexual', 'emotional', 'economic', 'other']\r\n+            if data['incident_type'] not in valid_types:\r\n+                return JsonResponse({\r\n+                    'error': 'Invalid incident type'\r\n+                }, status=400)\r\n+            \r\n+            # Parse incident date\r\n+            try:\r\n+                incident_date = datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00'))\r\n+            except ValueError:\r\n+                return JsonResponse({\r\n+                    'error': 'Invalid date format'\r\n+                }, status=400)\r\n+            \r\n+            # Create the report\r\n+            report = GBVReport.objects.create(\r\n+                name=data['name'].strip(),\r\n+                email=data['email'].strip().lower(),\r\n+                phone=data['phone'].strip(),\r\n+                incident_date=incident_date,\r\n+                incident_location=data['incident_location'].strip(),\r\n+                incident_type=data['incident_type'],\r\n+                description=data['description'].strip(),\r\n+                immediate_danger=data.get('immediate_danger', False),\r\n+                needs_medical_attention=data.get('needs_medical_attention', False),\r\n+                reference_code=generate_reference_code()\r\n+            )\r\n+            \r\n+            # Return success response\r\n+            return JsonResponse({\r\n+                'success': True,\r\n+                'reference_code': report.reference_code,\r\n+                'message': 'Report submitted successfully',\r\n+                'report_id': report.id\r\n+            }, status=201)\r\n+            \r\n+        except json.JSONDecodeError:\r\n+            return JsonResponse({\r\n+                'error': 'Invalid JSON data'\r\n+            }, status=400)\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'An error occurred while processing your request'\r\n+            }, status=500)\r\n+    \r\n+    def get(self, request):\r\n+        \"\"\"Get all reports (for admin use)\"\"\"\r\n+        reports = GBVReport.objects.all().order_by('-date_reported')\r\n+        \r\n+        reports_data = []\r\n+        for report in reports:\r\n+            reports_data.append({\r\n+                'id': report.id,\r\n+                'reference_code': report.reference_code,\r\n+                'name': report.name,\r\n+                'incident_type': report.get_incident_type_display(),\r\n+                'incident_location': report.incident_location,\r\n+                'incident_date': report.incident_date.isoformat(),\r\n+                'immediate_danger': report.immediate_danger,\r\n+                'needs_medical_attention': report.needs_medical_attention,\r\n+                'date_reported': report.date_reported.isoformat(),\r\n+            })\r\n+        \r\n+        return JsonResponse({\r\n+            'reports': reports_data,\r\n+            'total_count': reports.count()\r\n+        })\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportDetailView(View):\r\n+    \"\"\"Handle individual report details\"\"\"\r\n+    \r\n+    def get(self, request, report_id):\r\n+        \"\"\"Get a specific report by ID\"\"\"\r\n+        try:\r\n+            report = get_object_or_404(GBVReport, id=report_id)\r\n+            \r\n+            return JsonResponse({\r\n+                'id': report.id,\r\n+                'reference_code': report.reference_code,\r\n+                'name': report.name,\r\n+                'email': report.email,\r\n+                'phone': report.phone,\r\n+                'incident_type': report.get_incident_type_display(),\r\n+                'incident_location': report.incident_location,\r\n+                'incident_date': report.incident_date.isoformat(),\r\n+                'description': report.description,\r\n+                'immediate_danger': report.immediate_danger,\r\n+                'needs_medical_attention': report.needs_medical_attention,\r\n+                'date_reported': report.date_reported.isoformat(),\r\n+            })\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'Report not found'\r\n+            }, status=404)\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportTrackingView(View):\r\n+    \"\"\"Handle report tracking by reference code\"\"\"\r\n+    \r\n+    def get(self, request, reference_code):\r\n+        \"\"\"Track a report using reference code\"\"\"\r\n+        try:\r\n+            report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n+            \r\n+            return JsonResponse({\r\n+                'report': {\r\n+                    'reference_code': report.reference_code,\r\n+                    'status_display': 'Submitted',  # You can add status field to model later\r\n+                    'created_at': report.date_reported.isoformat(),\r\n+                    'incident_type': report.get_incident_type_display(),\r\n+                    'incident_location': report.incident_location,\r\n+                    'immediate_danger': report.immediate_danger,\r\n+                    'needs_medical_attention': report.needs_medical_attention,\r\n+                },\r\n+                'can_create_account': False  # Can be updated based on your business logic\r\n+            })\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'Invalid reference code'\r\n+            }, status=404)\r\n+\r\n+# Function-based views (alternative approach)\r\n+@csrf_exempt\r\n+@require_http_methods([\"POST\"])\r\n+def create_gbv_report(request):\r\n+    \"\"\"Alternative function-based view for creating reports\"\"\"\r\n+    try:\r\n+        data = json.loads(request.body)\r\n+        \r\n+        # Validation logic (same as above)\r\n+        required_fields = ['name', 'email', 'phone', 'incident_date', 'incident_location', 'incident_type', 'description']\r\n+        \r\n+        for field in required_fields:\r\n+            if not data.get(field):\r\n+                return JsonResponse({'error': f'{field.replace(\"_\", \" \").title()} is required'}, status=400)\r\n+        \r\n+        # Create report\r\n+        report = GBVReport.objects.create(\r\n+            name=data['name'].strip(),\r\n+            email=data['email'].strip().lower(),\r\n+            phone=data['phone'].strip(),\r\n+            incident_date=datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00')),\r\n+            incident_location=data['incident_location'].strip(),\r\n+            incident_type=data['incident_type'],\r\n+            description=data['description'].strip(),\r\n+            immediate_danger=data.get('immediate_danger', False),\r\n+            needs_medical_attention=data.get('needs_medical_attention', False),\r\n+            reference_code=generate_reference_code()\r\n+        )\r\n+        \r\n+        return JsonResponse({\r\n+            'success': True,\r\n+            'reference_code': report.reference_code,\r\n+            'message': 'Report submitted successfully'\r\n+        }, status=201)\r\n+        \r\n+    except Exception as e:\r\n+        return JsonResponse({'error': 'An error occurred'}, status=500)\r\n+\r\n+@require_http_methods([\"GET\"])\r\n+def track_gbv_report(request, reference_code):\r\n+    \"\"\"Alternative function-based view for tracking reports\"\"\"\r\n+    try:\r\n+        report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n+        \r\n+        return JsonResponse({\r\n+            'report': {\r\n+                'reference_code': report.reference_code,\r\n+                'status_display': 'Submitted',\r\n+                'created_at': report.date_reported.isoformat(),\r\n+                'incident_type': report.get_incident_type_display(),\r\n+            },\r\n+            'can_create_account': False\r\n+        })\r\n+    except:\r\n+        return JsonResponse({'error': 'Invalid reference code'}, status=404)\r\n+\r\n+# Emergency contact view\r\n+@require_http_methods([\"GET\"])\r\n+def emergency_contacts(request):\r\n+    \"\"\"Return emergency contact information\"\"\"\r\n+    return JsonResponse({\r\n+        'contacts': [\r\n+            {\r\n+                'name': 'Police',\r\n+                'number': '999',\r\n+                'type': 'emergency'\r\n+            },\r\n+            {\r\n+                'name': 'GBV Hotline',\r\n+                'number': '1195',\r\n+                'type': 'support'\r\n+            }\r\n+        ]\r\n+    })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752645045000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,10 @@\n         code = 'GBV' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\r\n         if not GBVReport.objects.filter(reference_code=code).exists():\r\n             return code\r\n \r\n+class \r\n \r\n-\r\n @method_decorator(csrf_exempt, name='dispatch')\r\n class GBVReportView(View):\r\n     \"\"\"Handle GBV report creation and retrieval\"\"\"\r\n     \r\n@@ -247,1001 +247,5 @@\n                 'number': '1195',\r\n                 'type': 'support'\r\n             }\r\n         ]\r\n-    })\n-from django.shortcuts import render, get_object_or_404\r\n-from django.http import JsonResponse\r\n-from django.views.decorators.csrf import csrf_exempt\r\n-from django.views.decorators.http import require_http_methods\r\n-from django.utils.decorators import method_decorator\r\n-from django.views import View\r\n-from rest_framework.viewsets import \r\n-from django.core.exceptions import ValidationError\r\n-from django.core.validators import validate_email\r\n-import json\r\n-import string\r\n-import random\r\n-from datetime import datetime\r\n-from .models import GBVReport\r\n-\r\n-def generate_reference_code():\r\n-    \"\"\"Generate a unique reference code for the report\"\"\"\r\n-    while True:\r\n-        code = 'GBV' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\r\n-        if not GBVReport.objects.filter(reference_code=code).exists():\r\n-            return code\r\n-\r\n-@method_decorator(csrf_exempt, name='dispatch')\r\n-class GBVReportView(View):\r\n-    \"\"\"Handle GBV report creation and retrieval\"\"\"\r\n-    \r\n-    def post(self, request):\r\n-        \"\"\"Create a new GBV report\"\"\"\r\n-        try:\r\n-            # Parse JSON data\r\n-            data = json.loads(request.body)\r\n-            \r\n-            # Validate required fields\r\n-            required_fields = [\r\n-                'name', 'email', 'phone', 'incident_date', \r\n-                'incident_location', 'incident_type', 'description'\r\n-            ]\r\n-            \r\n-            for field in required_fields:\r\n-                if not data.get(field):\r\n-                    return JsonResponse({\r\n-                        'error': f'{field.replace(\"_\", \" \").title()} is required'\r\n-                    }, status=400)\r\n-            \r\n-            # Validate email format\r\n-            try:\r\n-                validate_email(data['email'])\r\n-            except ValidationError:\r\n-                return JsonResponse({\r\n-                    'error': 'Please provide a valid email address'\r\n-                }, status=400)\r\n-            \r\n-            # Validate incident type\r\n-            valid_types = ['physical', 'sexual', 'emotional', 'economic', 'other']\r\n-            if data['incident_type'] not in valid_types:\r\n-                return JsonResponse({\r\n-                    'error': 'Invalid incident type'\r\n-                }, status=400)\r\n-            \r\n-            # Parse incident date\r\n-            try:\r\n-                incident_date = datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00'))\r\n-            except ValueError:\r\n-                return JsonResponse({\r\n-                    'error': 'Invalid date format'\r\n-                }, status=400)\r\n-            \r\n-            # Create the report\r\n-            report = GBVReport.objects.create(\r\n-                name=data['name'].strip(),\r\n-                email=data['email'].strip().lower(),\r\n-                phone=data['phone'].strip(),\r\n-                incident_date=incident_date,\r\n-                incident_location=data['incident_location'].strip(),\r\n-                incident_type=data['incident_type'],\r\n-                description=data['description'].strip(),\r\n-                immediate_danger=data.get('immediate_danger', False),\r\n-                needs_medical_attention=data.get('needs_medical_attention', False),\r\n-                reference_code=generate_reference_code()\r\n-            )\r\n-            \r\n-            # Return success response\r\n-            return JsonResponse({\r\n-                'success': True,\r\n-                'reference_code': report.reference_code,\r\n-                'message': 'Report submitted successfully',\r\n-                'report_id': report.id\r\n-            }, status=201)\r\n-            \r\n-        except json.JSONDecodeError:\r\n-            return JsonResponse({\r\n-                'error': 'Invalid JSON data'\r\n-            }, status=400)\r\n-        except Exception as e:\r\n-            return JsonResponse({\r\n-                'error': 'An error occurred while processing your request'\r\n-            }, status=500)\r\n-    \r\n-    def get(self, request):\r\n-        \"\"\"Get all reports (for admin use)\"\"\"\r\n-        reports = GBVReport.objects.all().order_by('-date_reported')\r\n-        \r\n-        reports_data = []\r\n-        for report in reports:\r\n-            reports_data.append({\r\n-                'id': report.id,\r\n-                'reference_code': report.reference_code,\r\n-                'name': report.name,\r\n-                'incident_type': report.get_incident_type_display(),\r\n-                'incident_location': report.incident_location,\r\n-                'incident_date': report.incident_date.isoformat(),\r\n-                'immediate_danger': report.immediate_danger,\r\n-                'needs_medical_attention': report.needs_medical_attention,\r\n-                'date_reported': report.date_reported.isoformat(),\r\n-            })\r\n-        \r\n-        return JsonResponse({\r\n-            'reports': reports_data,\r\n-            'total_count': reports.count()\r\n-        })\r\n-\r\n-@method_decorator(csrf_exempt, name='dispatch')\r\n-class GBVReportDetailView(View):\r\n-    \"\"\"Handle individual report details\"\"\"\r\n-    \r\n-    def get(self, request, report_id):\r\n-        \"\"\"Get a specific report by ID\"\"\"\r\n-        try:\r\n-            report = get_object_or_404(GBVReport, id=report_id)\r\n-            \r\n-            return JsonResponse({\r\n-                'id': report.id,\r\n-                'reference_code': report.reference_code,\r\n-                'name': report.name,\r\n-                'email': report.email,\r\n-                'phone': report.phone,\r\n-                'incident_type': report.get_incident_type_display(),\r\n-                'incident_location': report.incident_location,\r\n-                'incident_date': report.incident_date.isoformat(),\r\n-                'description': report.description,\r\n-                'immediate_danger': report.immediate_danger,\r\n-                'needs_medical_attention': report.needs_medical_attention,\r\n-                'date_reported': report.date_reported.isoformat(),\r\n-            })\r\n-        except Exception as e:\r\n-            return JsonResponse({\r\n-                'error': 'Report not found'\r\n-            }, status=404)\r\n-\r\n-@method_decorator(csrf_exempt, name='dispatch')\r\n-class GBVReportTrackingView(View):\r\n-    \"\"\"Handle report tracking by reference code\"\"\"\r\n-    \r\n-    def get(self, request, reference_code):\r\n-        \"\"\"Track a report using reference code\"\"\"\r\n-        try:\r\n-            report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n-            \r\n-            return JsonResponse({\r\n-                'report': {\r\n-                    'reference_code': report.reference_code,\r\n-                    'status_display': 'Submitted',  # You can add status field to model later\r\n-                    'created_at': report.date_reported.isoformat(),\r\n-                    'incident_type': report.get_incident_type_display(),\r\n-                    'incident_location': report.incident_location,\r\n-                    'immediate_danger': report.immediate_danger,\r\n-                    'needs_medical_attention': report.needs_medical_attention,\r\n-                },\r\n-                'can_create_account': False  # Can be updated based on your business logic\r\n-            })\r\n-        except Exception as e:\r\n-            return JsonResponse({\r\n-                'error': 'Invalid reference code'\r\n-            }, status=404)\r\n-\r\n-# Function-based views (alternative approach)\r\n-@csrf_exempt\r\n-@require_http_methods([\"POST\"])\r\n-def create_gbv_report(request):\r\n-    \"\"\"Alternative function-based view for creating reports\"\"\"\r\n-    try:\r\n-        data = json.loads(request.body)\r\n-        \r\n-        # Validation logic (same as above)\r\n-        required_fields = ['name', 'email', 'phone', 'incident_date', 'incident_location', 'incident_type', 'description']\r\n-        \r\n-        for field in required_fields:\r\n-            if not data.get(field):\r\n-                return JsonResponse({'error': f'{field.replace(\"_\", \" \").title()} is required'}, status=400)\r\n-        \r\n-        # Create report\r\n-        report = GBVReport.objects.create(\r\n-            name=data['name'].strip(),\r\n-            email=data['email'].strip().lower(),\r\n-            phone=data['phone'].strip(),\r\n-            incident_date=datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00')),\r\n-            incident_location=data['incident_location'].strip(),\r\n-            incident_type=data['incident_type'],\r\n-            description=data['description'].strip(),\r\n-            immediate_danger=data.get('immediate_danger', False),\r\n-            needs_medical_attention=data.get('needs_medical_attention', False),\r\n-            reference_code=generate_reference_code()\r\n-        )\r\n-        \r\n-        return JsonResponse({\r\n-            'success': True,\r\n-            'reference_code': report.reference_code,\r\n-            'message': 'Report submitted successfully'\r\n-        }, status=201)\r\n-        \r\n-    except Exception as e:\r\n-        return JsonResponse({'error': 'An error occurred'}, status=500)\r\n-\r\n-@require_http_methods([\"GET\"])\r\n-def track_gbv_report(request, reference_code):\r\n-    \"\"\"Alternative function-based view for tracking reports\"\"\"\r\n-    try:\r\n-        report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n-        \r\n-        return JsonResponse({\r\n-            'report': {\r\n-                'reference_code': report.reference_code,\r\n-                'status_display': 'Submitted',\r\n-                'created_at': report.date_reported.isoformat(),\r\n-                'incident_type': report.get_incident_type_display(),\r\n-            },\r\n-            'can_create_account': False\r\n-        })\r\n-    except:\r\n-        return JsonResponse({'error': 'Invalid reference code'}, status=404)\r\n-\r\n-# Emergency contact view\r\n-@require_http_methods([\"GET\"])\r\n-def emergency_contacts(request):\r\n-    \"\"\"Return emergency contact information\"\"\"\r\n-    return JsonResponse({\r\n-        'contacts': [\r\n-            {\r\n-                'name': 'Police',\r\n-                'number': '999',\r\n-                'type': 'emergency'\r\n-            },\r\n-            {\r\n-                'name': 'GBV Hotline',\r\n-                'number': '1195',\r\n-                'type': 'support'\r\n-            }\r\n-        ]\r\n-    })\n-from django.shortcuts import render, get_object_or_404\r\n-from django.http import JsonResponse\r\n-from django.views.decorators.csrf import csrf_exempt\r\n-from django.views.decorators.http import require_http_methods\r\n-from django.utils.decorators import method_decorator\r\n-from django.views import View\r\n-from rest_framework.ap\r\n-from django.core.exceptions import ValidationError\r\n-from django.core.validators import validate_email\r\n-import json\r\n-import string\r\n-import random\r\n-from datetime import datetime\r\n-from .models import GBVReport\r\n-\r\n-def generate_reference_code():\r\n-    \"\"\"Generate a unique reference code for the report\"\"\"\r\n-    while True:\r\n-        code = 'GBV' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\r\n-        if not GBVReport.objects.filter(reference_code=code).exists():\r\n-            return code\r\n-\r\n-@method_decorator(csrf_exempt, name='dispatch')\r\n-class GBVReportView(View):\r\n-    \"\"\"Handle GBV report creation and retrieval\"\"\"\r\n-    \r\n-    def post(self, request):\r\n-        \"\"\"Create a new GBV report\"\"\"\r\n-        try:\r\n-            # Parse JSON data\r\n-            data = json.loads(request.body)\r\n-            \r\n-            # Validate required fields\r\n-            required_fields = [\r\n-                'name', 'email', 'phone', 'incident_date', \r\n-                'incident_location', 'incident_type', 'description'\r\n-            ]\r\n-            \r\n-            for field in required_fields:\r\n-                if not data.get(field):\r\n-                    return JsonResponse({\r\n-                        'error': f'{field.replace(\"_\", \" \").title()} is required'\r\n-                    }, status=400)\r\n-            \r\n-            # Validate email format\r\n-            try:\r\n-                validate_email(data['email'])\r\n-            except ValidationError:\r\n-                return JsonResponse({\r\n-                    'error': 'Please provide a valid email address'\r\n-                }, status=400)\r\n-            \r\n-            # Validate incident type\r\n-            valid_types = ['physical', 'sexual', 'emotional', 'economic', 'other']\r\n-            if data['incident_type'] not in valid_types:\r\n-                return JsonResponse({\r\n-                    'error': 'Invalid incident type'\r\n-                }, status=400)\r\n-            \r\n-            # Parse incident date\r\n-            try:\r\n-                incident_date = datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00'))\r\n-            except ValueError:\r\n-                return JsonResponse({\r\n-                    'error': 'Invalid date format'\r\n-                }, status=400)\r\n-            \r\n-            # Create the report\r\n-            report = GBVReport.objects.create(\r\n-                name=data['name'].strip(),\r\n-                email=data['email'].strip().lower(),\r\n-                phone=data['phone'].strip(),\r\n-                incident_date=incident_date,\r\n-                incident_location=data['incident_location'].strip(),\r\n-                incident_type=data['incident_type'],\r\n-                description=data['description'].strip(),\r\n-                immediate_danger=data.get('immediate_danger', False),\r\n-                needs_medical_attention=data.get('needs_medical_attention', False),\r\n-                reference_code=generate_reference_code()\r\n-            )\r\n-            \r\n-            # Return success response\r\n-            return JsonResponse({\r\n-                'success': True,\r\n-                'reference_code': report.reference_code,\r\n-                'message': 'Report submitted successfully',\r\n-                'report_id': report.id\r\n-            }, status=201)\r\n-            \r\n-        except json.JSONDecodeError:\r\n-            return JsonResponse({\r\n-                'error': 'Invalid JSON data'\r\n-            }, status=400)\r\n-        except Exception as e:\r\n-            return JsonResponse({\r\n-                'error': 'An error occurred while processing your request'\r\n-            }, status=500)\r\n-    \r\n-    def get(self, request):\r\n-        \"\"\"Get all reports (for admin use)\"\"\"\r\n-        reports = GBVReport.objects.all().order_by('-date_reported')\r\n-        \r\n-        reports_data = []\r\n-        for report in reports:\r\n-            reports_data.append({\r\n-                'id': report.id,\r\n-                'reference_code': report.reference_code,\r\n-                'name': report.name,\r\n-                'incident_type': report.get_incident_type_display(),\r\n-                'incident_location': report.incident_location,\r\n-                'incident_date': report.incident_date.isoformat(),\r\n-                'immediate_danger': report.immediate_danger,\r\n-                'needs_medical_attention': report.needs_medical_attention,\r\n-                'date_reported': report.date_reported.isoformat(),\r\n-            })\r\n-        \r\n-        return JsonResponse({\r\n-            'reports': reports_data,\r\n-            'total_count': reports.count()\r\n-        })\r\n-\r\n-@method_decorator(csrf_exempt, name='dispatch')\r\n-class GBVReportDetailView(View):\r\n-    \"\"\"Handle individual report details\"\"\"\r\n-    \r\n-    def get(self, request, report_id):\r\n-        \"\"\"Get a specific report by ID\"\"\"\r\n-        try:\r\n-            report = get_object_or_404(GBVReport, id=report_id)\r\n-            \r\n-            return JsonResponse({\r\n-                'id': report.id,\r\n-                'reference_code': report.reference_code,\r\n-                'name': report.name,\r\n-                'email': report.email,\r\n-                'phone': report.phone,\r\n-                'incident_type': report.get_incident_type_display(),\r\n-                'incident_location': report.incident_location,\r\n-                'incident_date': report.incident_date.isoformat(),\r\n-                'description': report.description,\r\n-                'immediate_danger': report.immediate_danger,\r\n-                'needs_medical_attention': report.needs_medical_attention,\r\n-                'date_reported': report.date_reported.isoformat(),\r\n-            })\r\n-        except Exception as e:\r\n-            return JsonResponse({\r\n-                'error': 'Report not found'\r\n-            }, status=404)\r\n-\r\n-@method_decorator(csrf_exempt, name='dispatch')\r\n-class GBVReportTrackingView(View):\r\n-    \"\"\"Handle report tracking by reference code\"\"\"\r\n-    \r\n-    def get(self, request, reference_code):\r\n-        \"\"\"Track a report using reference code\"\"\"\r\n-        try:\r\n-            report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n-            \r\n-            return JsonResponse({\r\n-                'report': {\r\n-                    'reference_code': report.reference_code,\r\n-                    'status_display': 'Submitted',  # You can add status field to model later\r\n-                    'created_at': report.date_reported.isoformat(),\r\n-                    'incident_type': report.get_incident_type_display(),\r\n-                    'incident_location': report.incident_location,\r\n-                    'immediate_danger': report.immediate_danger,\r\n-                    'needs_medical_attention': report.needs_medical_attention,\r\n-                },\r\n-                'can_create_account': False  # Can be updated based on your business logic\r\n-            })\r\n-        except Exception as e:\r\n-            return JsonResponse({\r\n-                'error': 'Invalid reference code'\r\n-            }, status=404)\r\n-\r\n-# Function-based views (alternative approach)\r\n-@csrf_exempt\r\n-@require_http_methods([\"POST\"])\r\n-def create_gbv_report(request):\r\n-    \"\"\"Alternative function-based view for creating reports\"\"\"\r\n-    try:\r\n-        data = json.loads(request.body)\r\n-        \r\n-        # Validation logic (same as above)\r\n-        required_fields = ['name', 'email', 'phone', 'incident_date', 'incident_location', 'incident_type', 'description']\r\n-        \r\n-        for field in required_fields:\r\n-            if not data.get(field):\r\n-                return JsonResponse({'error': f'{field.replace(\"_\", \" \").title()} is required'}, status=400)\r\n-        \r\n-        # Create report\r\n-        report = GBVReport.objects.create(\r\n-            name=data['name'].strip(),\r\n-            email=data['email'].strip().lower(),\r\n-            phone=data['phone'].strip(),\r\n-            incident_date=datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00')),\r\n-            incident_location=data['incident_location'].strip(),\r\n-            incident_type=data['incident_type'],\r\n-            description=data['description'].strip(),\r\n-            immediate_danger=data.get('immediate_danger', False),\r\n-            needs_medical_attention=data.get('needs_medical_attention', False),\r\n-            reference_code=generate_reference_code()\r\n-        )\r\n-        \r\n-        return JsonResponse({\r\n-            'success': True,\r\n-            'reference_code': report.reference_code,\r\n-            'message': 'Report submitted successfully'\r\n-        }, status=201)\r\n-        \r\n-    except Exception as e:\r\n-        return JsonResponse({'error': 'An error occurred'}, status=500)\r\n-\r\n-@require_http_methods([\"GET\"])\r\n-def track_gbv_report(request, reference_code):\r\n-    \"\"\"Alternative function-based view for tracking reports\"\"\"\r\n-    try:\r\n-        report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n-        \r\n-        return JsonResponse({\r\n-            'report': {\r\n-                'reference_code': report.reference_code,\r\n-                'status_display': 'Submitted',\r\n-                'created_at': report.date_reported.isoformat(),\r\n-                'incident_type': report.get_incident_type_display(),\r\n-            },\r\n-            'can_create_account': False\r\n-        })\r\n-    except:\r\n-        return JsonResponse({'error': 'Invalid reference code'}, status=404)\r\n-\r\n-# Emergency contact view\r\n-@require_http_methods([\"GET\"])\r\n-def emergency_contacts(request):\r\n-    \"\"\"Return emergency contact information\"\"\"\r\n-    return JsonResponse({\r\n-        'contacts': [\r\n-            {\r\n-                'name': 'Police',\r\n-                'number': '999',\r\n-                'type': 'emergency'\r\n-            },\r\n-            {\r\n-                'name': 'GBV Hotline',\r\n-                'number': '1195',\r\n-                'type': 'support'\r\n-            }\r\n-        ]\r\n-    })\n-from django.shortcuts import render, get_object_or_404\r\n-from django.http import JsonResponse\r\n-from django.views.decorators.csrf import csrf_exempt\r\n-from django.views.decorators.http import require_http_methods\r\n-from django.utils.decorators import method_decorator\r\n-from django.views import View\r\n-from re\r\n-from django.core.exceptions import ValidationError\r\n-from django.core.validators import validate_email\r\n-import json\r\n-import string\r\n-import random\r\n-from datetime import datetime\r\n-from .models import GBVReport\r\n-\r\n-def generate_reference_code():\r\n-    \"\"\"Generate a unique reference code for the report\"\"\"\r\n-    while True:\r\n-        code = 'GBV' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\r\n-        if not GBVReport.objects.filter(reference_code=code).exists():\r\n-            return code\r\n-\r\n-@method_decorator(csrf_exempt, name='dispatch')\r\n-class GBVReportView(View):\r\n-    \"\"\"Handle GBV report creation and retrieval\"\"\"\r\n-    \r\n-    def post(self, request):\r\n-        \"\"\"Create a new GBV report\"\"\"\r\n-        try:\r\n-            # Parse JSON data\r\n-            data = json.loads(request.body)\r\n-            \r\n-            # Validate required fields\r\n-            required_fields = [\r\n-                'name', 'email', 'phone', 'incident_date', \r\n-                'incident_location', 'incident_type', 'description'\r\n-            ]\r\n-            \r\n-            for field in required_fields:\r\n-                if not data.get(field):\r\n-                    return JsonResponse({\r\n-                        'error': f'{field.replace(\"_\", \" \").title()} is required'\r\n-                    }, status=400)\r\n-            \r\n-            # Validate email format\r\n-            try:\r\n-                validate_email(data['email'])\r\n-            except ValidationError:\r\n-                return JsonResponse({\r\n-                    'error': 'Please provide a valid email address'\r\n-                }, status=400)\r\n-            \r\n-            # Validate incident type\r\n-            valid_types = ['physical', 'sexual', 'emotional', 'economic', 'other']\r\n-            if data['incident_type'] not in valid_types:\r\n-                return JsonResponse({\r\n-                    'error': 'Invalid incident type'\r\n-                }, status=400)\r\n-            \r\n-            # Parse incident date\r\n-            try:\r\n-                incident_date = datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00'))\r\n-            except ValueError:\r\n-                return JsonResponse({\r\n-                    'error': 'Invalid date format'\r\n-                }, status=400)\r\n-            \r\n-            # Create the report\r\n-            report = GBVReport.objects.create(\r\n-                name=data['name'].strip(),\r\n-                email=data['email'].strip().lower(),\r\n-                phone=data['phone'].strip(),\r\n-                incident_date=incident_date,\r\n-                incident_location=data['incident_location'].strip(),\r\n-                incident_type=data['incident_type'],\r\n-                description=data['description'].strip(),\r\n-                immediate_danger=data.get('immediate_danger', False),\r\n-                needs_medical_attention=data.get('needs_medical_attention', False),\r\n-                reference_code=generate_reference_code()\r\n-            )\r\n-            \r\n-            # Return success response\r\n-            return JsonResponse({\r\n-                'success': True,\r\n-                'reference_code': report.reference_code,\r\n-                'message': 'Report submitted successfully',\r\n-                'report_id': report.id\r\n-            }, status=201)\r\n-            \r\n-        except json.JSONDecodeError:\r\n-            return JsonResponse({\r\n-                'error': 'Invalid JSON data'\r\n-            }, status=400)\r\n-        except Exception as e:\r\n-            return JsonResponse({\r\n-                'error': 'An error occurred while processing your request'\r\n-            }, status=500)\r\n-    \r\n-    def get(self, request):\r\n-        \"\"\"Get all reports (for admin use)\"\"\"\r\n-        reports = GBVReport.objects.all().order_by('-date_reported')\r\n-        \r\n-        reports_data = []\r\n-        for report in reports:\r\n-            reports_data.append({\r\n-                'id': report.id,\r\n-                'reference_code': report.reference_code,\r\n-                'name': report.name,\r\n-                'incident_type': report.get_incident_type_display(),\r\n-                'incident_location': report.incident_location,\r\n-                'incident_date': report.incident_date.isoformat(),\r\n-                'immediate_danger': report.immediate_danger,\r\n-                'needs_medical_attention': report.needs_medical_attention,\r\n-                'date_reported': report.date_reported.isoformat(),\r\n-            })\r\n-        \r\n-        return JsonResponse({\r\n-            'reports': reports_data,\r\n-            'total_count': reports.count()\r\n-        })\r\n-\r\n-@method_decorator(csrf_exempt, name='dispatch')\r\n-class GBVReportDetailView(View):\r\n-    \"\"\"Handle individual report details\"\"\"\r\n-    \r\n-    def get(self, request, report_id):\r\n-        \"\"\"Get a specific report by ID\"\"\"\r\n-        try:\r\n-            report = get_object_or_404(GBVReport, id=report_id)\r\n-            \r\n-            return JsonResponse({\r\n-                'id': report.id,\r\n-                'reference_code': report.reference_code,\r\n-                'name': report.name,\r\n-                'email': report.email,\r\n-                'phone': report.phone,\r\n-                'incident_type': report.get_incident_type_display(),\r\n-                'incident_location': report.incident_location,\r\n-                'incident_date': report.incident_date.isoformat(),\r\n-                'description': report.description,\r\n-                'immediate_danger': report.immediate_danger,\r\n-                'needs_medical_attention': report.needs_medical_attention,\r\n-                'date_reported': report.date_reported.isoformat(),\r\n-            })\r\n-        except Exception as e:\r\n-            return JsonResponse({\r\n-                'error': 'Report not found'\r\n-            }, status=404)\r\n-\r\n-@method_decorator(csrf_exempt, name='dispatch')\r\n-class GBVReportTrackingView(View):\r\n-    \"\"\"Handle report tracking by reference code\"\"\"\r\n-    \r\n-    def get(self, request, reference_code):\r\n-        \"\"\"Track a report using reference code\"\"\"\r\n-        try:\r\n-            report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n-            \r\n-            return JsonResponse({\r\n-                'report': {\r\n-                    'reference_code': report.reference_code,\r\n-                    'status_display': 'Submitted',  # You can add status field to model later\r\n-                    'created_at': report.date_reported.isoformat(),\r\n-                    'incident_type': report.get_incident_type_display(),\r\n-                    'incident_location': report.incident_location,\r\n-                    'immediate_danger': report.immediate_danger,\r\n-                    'needs_medical_attention': report.needs_medical_attention,\r\n-                },\r\n-                'can_create_account': False  # Can be updated based on your business logic\r\n-            })\r\n-        except Exception as e:\r\n-            return JsonResponse({\r\n-                'error': 'Invalid reference code'\r\n-            }, status=404)\r\n-\r\n-# Function-based views (alternative approach)\r\n-@csrf_exempt\r\n-@require_http_methods([\"POST\"])\r\n-def create_gbv_report(request):\r\n-    \"\"\"Alternative function-based view for creating reports\"\"\"\r\n-    try:\r\n-        data = json.loads(request.body)\r\n-        \r\n-        # Validation logic (same as above)\r\n-        required_fields = ['name', 'email', 'phone', 'incident_date', 'incident_location', 'incident_type', 'description']\r\n-        \r\n-        for field in required_fields:\r\n-            if not data.get(field):\r\n-                return JsonResponse({'error': f'{field.replace(\"_\", \" \").title()} is required'}, status=400)\r\n-        \r\n-        # Create report\r\n-        report = GBVReport.objects.create(\r\n-            name=data['name'].strip(),\r\n-            email=data['email'].strip().lower(),\r\n-            phone=data['phone'].strip(),\r\n-            incident_date=datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00')),\r\n-            incident_location=data['incident_location'].strip(),\r\n-            incident_type=data['incident_type'],\r\n-            description=data['description'].strip(),\r\n-            immediate_danger=data.get('immediate_danger', False),\r\n-            needs_medical_attention=data.get('needs_medical_attention', False),\r\n-            reference_code=generate_reference_code()\r\n-        )\r\n-        \r\n-        return JsonResponse({\r\n-            'success': True,\r\n-            'reference_code': report.reference_code,\r\n-            'message': 'Report submitted successfully'\r\n-        }, status=201)\r\n-        \r\n-    except Exception as e:\r\n-        return JsonResponse({'error': 'An error occurred'}, status=500)\r\n-\r\n-@require_http_methods([\"GET\"])\r\n-def track_gbv_report(request, reference_code):\r\n-    \"\"\"Alternative function-based view for tracking reports\"\"\"\r\n-    try:\r\n-        report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n-        \r\n-        return JsonResponse({\r\n-            'report': {\r\n-                'reference_code': report.reference_code,\r\n-                'status_display': 'Submitted',\r\n-                'created_at': report.date_reported.isoformat(),\r\n-                'incident_type': report.get_incident_type_display(),\r\n-            },\r\n-            'can_create_account': False\r\n-        })\r\n-    except:\r\n-        return JsonResponse({'error': 'Invalid reference code'}, status=404)\r\n-\r\n-# Emergency contact view\r\n-@require_http_methods([\"GET\"])\r\n-def emergency_contacts(request):\r\n-    \"\"\"Return emergency contact information\"\"\"\r\n-    return JsonResponse({\r\n-        'contacts': [\r\n-            {\r\n-                'name': 'Police',\r\n-                'number': '999',\r\n-                'type': 'emergency'\r\n-            },\r\n-            {\r\n-                'name': 'GBV Hotline',\r\n-                'number': '1195',\r\n-                'type': 'support'\r\n-            }\r\n-        ]\r\n-    })\n-from django.shortcuts import render, get_object_or_404\r\n-from django.http import JsonResponse\r\n-from django.views.decorators.csrf import csrf_exempt\r\n-from django.views.decorators.http import require_http_methods\r\n-from django.utils.decorators import method_decorator\r\n-from django.views import View\r\n-\r\n-from django.core.exceptions import ValidationError\r\n-from django.core.validators import validate_email\r\n-import json\r\n-import string\r\n-import random\r\n-from datetime import datetime\r\n-from .models import GBVReport\r\n-\r\n-def generate_reference_code():\r\n-    \"\"\"Generate a unique reference code for the report\"\"\"\r\n-    while True:\r\n-        code = 'GBV' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\r\n-        if not GBVReport.objects.filter(reference_code=code).exists():\r\n-            return code\r\n-\r\n-@method_decorator(csrf_exempt, name='dispatch')\r\n-class GBVReportView(View):\r\n-    \"\"\"Handle GBV report creation and retrieval\"\"\"\r\n-    \r\n-    def post(self, request):\r\n-        \"\"\"Create a new GBV report\"\"\"\r\n-        try:\r\n-            # Parse JSON data\r\n-            data = json.loads(request.body)\r\n-            \r\n-            # Validate required fields\r\n-            required_fields = [\r\n-                'name', 'email', 'phone', 'incident_date', \r\n-                'incident_location', 'incident_type', 'description'\r\n-            ]\r\n-            \r\n-            for field in required_fields:\r\n-                if not data.get(field):\r\n-                    return JsonResponse({\r\n-                        'error': f'{field.replace(\"_\", \" \").title()} is required'\r\n-                    }, status=400)\r\n-            \r\n-            # Validate email format\r\n-            try:\r\n-                validate_email(data['email'])\r\n-            except ValidationError:\r\n-                return JsonResponse({\r\n-                    'error': 'Please provide a valid email address'\r\n-                }, status=400)\r\n-            \r\n-            # Validate incident type\r\n-            valid_types = ['physical', 'sexual', 'emotional', 'economic', 'other']\r\n-            if data['incident_type'] not in valid_types:\r\n-                return JsonResponse({\r\n-                    'error': 'Invalid incident type'\r\n-                }, status=400)\r\n-            \r\n-            # Parse incident date\r\n-            try:\r\n-                incident_date = datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00'))\r\n-            except ValueError:\r\n-                return JsonResponse({\r\n-                    'error': 'Invalid date format'\r\n-                }, status=400)\r\n-            \r\n-            # Create the report\r\n-            report = GBVReport.objects.create(\r\n-                name=data['name'].strip(),\r\n-                email=data['email'].strip().lower(),\r\n-                phone=data['phone'].strip(),\r\n-                incident_date=incident_date,\r\n-                incident_location=data['incident_location'].strip(),\r\n-                incident_type=data['incident_type'],\r\n-                description=data['description'].strip(),\r\n-                immediate_danger=data.get('immediate_danger', False),\r\n-                needs_medical_attention=data.get('needs_medical_attention', False),\r\n-                reference_code=generate_reference_code()\r\n-            )\r\n-            \r\n-            # Return success response\r\n-            return JsonResponse({\r\n-                'success': True,\r\n-                'reference_code': report.reference_code,\r\n-                'message': 'Report submitted successfully',\r\n-                'report_id': report.id\r\n-            }, status=201)\r\n-            \r\n-        except json.JSONDecodeError:\r\n-            return JsonResponse({\r\n-                'error': 'Invalid JSON data'\r\n-            }, status=400)\r\n-        except Exception as e:\r\n-            return JsonResponse({\r\n-                'error': 'An error occurred while processing your request'\r\n-            }, status=500)\r\n-    \r\n-    def get(self, request):\r\n-        \"\"\"Get all reports (for admin use)\"\"\"\r\n-        reports = GBVReport.objects.all().order_by('-date_reported')\r\n-        \r\n-        reports_data = []\r\n-        for report in reports:\r\n-            reports_data.append({\r\n-                'id': report.id,\r\n-                'reference_code': report.reference_code,\r\n-                'name': report.name,\r\n-                'incident_type': report.get_incident_type_display(),\r\n-                'incident_location': report.incident_location,\r\n-                'incident_date': report.incident_date.isoformat(),\r\n-                'immediate_danger': report.immediate_danger,\r\n-                'needs_medical_attention': report.needs_medical_attention,\r\n-                'date_reported': report.date_reported.isoformat(),\r\n-            })\r\n-        \r\n-        return JsonResponse({\r\n-            'reports': reports_data,\r\n-            'total_count': reports.count()\r\n-        })\r\n-\r\n-@method_decorator(csrf_exempt, name='dispatch')\r\n-class GBVReportDetailView(View):\r\n-    \"\"\"Handle individual report details\"\"\"\r\n-    \r\n-    def get(self, request, report_id):\r\n-        \"\"\"Get a specific report by ID\"\"\"\r\n-        try:\r\n-            report = get_object_or_404(GBVReport, id=report_id)\r\n-            \r\n-            return JsonResponse({\r\n-                'id': report.id,\r\n-                'reference_code': report.reference_code,\r\n-                'name': report.name,\r\n-                'email': report.email,\r\n-                'phone': report.phone,\r\n-                'incident_type': report.get_incident_type_display(),\r\n-                'incident_location': report.incident_location,\r\n-                'incident_date': report.incident_date.isoformat(),\r\n-                'description': report.description,\r\n-                'immediate_danger': report.immediate_danger,\r\n-                'needs_medical_attention': report.needs_medical_attention,\r\n-                'date_reported': report.date_reported.isoformat(),\r\n-            })\r\n-        except Exception as e:\r\n-            return JsonResponse({\r\n-                'error': 'Report not found'\r\n-            }, status=404)\r\n-\r\n-@method_decorator(csrf_exempt, name='dispatch')\r\n-class GBVReportTrackingView(View):\r\n-    \"\"\"Handle report tracking by reference code\"\"\"\r\n-    \r\n-    def get(self, request, reference_code):\r\n-        \"\"\"Track a report using reference code\"\"\"\r\n-        try:\r\n-            report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n-            \r\n-            return JsonResponse({\r\n-                'report': {\r\n-                    'reference_code': report.reference_code,\r\n-                    'status_display': 'Submitted',  # You can add status field to model later\r\n-                    'created_at': report.date_reported.isoformat(),\r\n-                    'incident_type': report.get_incident_type_display(),\r\n-                    'incident_location': report.incident_location,\r\n-                    'immediate_danger': report.immediate_danger,\r\n-                    'needs_medical_attention': report.needs_medical_attention,\r\n-                },\r\n-                'can_create_account': False  # Can be updated based on your business logic\r\n-            })\r\n-        except Exception as e:\r\n-            return JsonResponse({\r\n-                'error': 'Invalid reference code'\r\n-            }, status=404)\r\n-\r\n-# Function-based views (alternative approach)\r\n-@csrf_exempt\r\n-@require_http_methods([\"POST\"])\r\n-def create_gbv_report(request):\r\n-    \"\"\"Alternative function-based view for creating reports\"\"\"\r\n-    try:\r\n-        data = json.loads(request.body)\r\n-        \r\n-        # Validation logic (same as above)\r\n-        required_fields = ['name', 'email', 'phone', 'incident_date', 'incident_location', 'incident_type', 'description']\r\n-        \r\n-        for field in required_fields:\r\n-            if not data.get(field):\r\n-                return JsonResponse({'error': f'{field.replace(\"_\", \" \").title()} is required'}, status=400)\r\n-        \r\n-        # Create report\r\n-        report = GBVReport.objects.create(\r\n-            name=data['name'].strip(),\r\n-            email=data['email'].strip().lower(),\r\n-            phone=data['phone'].strip(),\r\n-            incident_date=datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00')),\r\n-            incident_location=data['incident_location'].strip(),\r\n-            incident_type=data['incident_type'],\r\n-            description=data['description'].strip(),\r\n-            immediate_danger=data.get('immediate_danger', False),\r\n-            needs_medical_attention=data.get('needs_medical_attention', False),\r\n-            reference_code=generate_reference_code()\r\n-        )\r\n-        \r\n-        return JsonResponse({\r\n-            'success': True,\r\n-            'reference_code': report.reference_code,\r\n-            'message': 'Report submitted successfully'\r\n-        }, status=201)\r\n-        \r\n-    except Exception as e:\r\n-        return JsonResponse({'error': 'An error occurred'}, status=500)\r\n-\r\n-@require_http_methods([\"GET\"])\r\n-def track_gbv_report(request, reference_code):\r\n-    \"\"\"Alternative function-based view for tracking reports\"\"\"\r\n-    try:\r\n-        report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n-        \r\n-        return JsonResponse({\r\n-            'report': {\r\n-                'reference_code': report.reference_code,\r\n-                'status_display': 'Submitted',\r\n-                'created_at': report.date_reported.isoformat(),\r\n-                'incident_type': report.get_incident_type_display(),\r\n-            },\r\n-            'can_create_account': False\r\n-        })\r\n-    except:\r\n-        return JsonResponse({'error': 'Invalid reference code'}, status=404)\r\n-\r\n-# Emergency contact view\r\n-@require_http_methods([\"GET\"])\r\n-def emergency_contacts(request):\r\n-    \"\"\"Return emergency contact information\"\"\"\r\n-    return JsonResponse({\r\n-        'contacts': [\r\n-            {\r\n-                'name': 'Police',\r\n-                'number': '999',\r\n-                'type': 'emergency'\r\n-            },\r\n-            {\r\n-                'name': 'GBV Hotline',\r\n-                'number': '1195',\r\n-                'type': 'support'\r\n-            }\r\n-        ]\r\n     })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752645050670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,251 @@\n+from django.shortcuts import render, get_object_or_404\r\n+from django.http import JsonResponse\r\n+from django.views.decorators.csrf import csrf_exempt\r\n+from django.views.decorators.http import require_http_methods\r\n+from django.utils.decorators import method_decorator\r\n+from django.views import View\r\n+from rest_framework.viewsets import ModelViewSet\r\n+from django.core.exceptions import ValidationError\r\n+from django.core.validators import validate_email\r\n+import json\r\n+import string\r\n+import random\r\n+from datetime import datetime\r\n+from .models import GBVReport\r\n+\r\n+def generate_reference_code():\r\n+    \"\"\"Generate a unique reference code for the report\"\"\"\r\n+    while True:\r\n+        code = 'GBV' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\r\n+        if not GBVReport.objects.filter(reference_code=code).exists():\r\n+            return code\r\n+\r\n+class Report\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportView(View):\r\n+    \"\"\"Handle GBV report creation and retrieval\"\"\"\r\n+    \r\n+    def post(self, request):\r\n+        \"\"\"Create a new GBV report\"\"\"\r\n+        try:\r\n+            # Parse JSON data\r\n+            data = json.loads(request.body)\r\n+            \r\n+            # Validate required fields\r\n+            required_fields = [\r\n+                'name', 'email', 'phone', 'incident_date', \r\n+                'incident_location', 'incident_type', 'description'\r\n+            ]\r\n+            \r\n+            for field in required_fields:\r\n+                if not data.get(field):\r\n+                    return JsonResponse({\r\n+                        'error': f'{field.replace(\"_\", \" \").title()} is required'\r\n+                    }, status=400)\r\n+            \r\n+            # Validate email format\r\n+            try:\r\n+                validate_email(data['email'])\r\n+            except ValidationError:\r\n+                return JsonResponse({\r\n+                    'error': 'Please provide a valid email address'\r\n+                }, status=400)\r\n+            \r\n+            # Validate incident type\r\n+            valid_types = ['physical', 'sexual', 'emotional', 'economic', 'other']\r\n+            if data['incident_type'] not in valid_types:\r\n+                return JsonResponse({\r\n+                    'error': 'Invalid incident type'\r\n+                }, status=400)\r\n+            \r\n+            # Parse incident date\r\n+            try:\r\n+                incident_date = datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00'))\r\n+            except ValueError:\r\n+                return JsonResponse({\r\n+                    'error': 'Invalid date format'\r\n+                }, status=400)\r\n+            \r\n+            # Create the report\r\n+            report = GBVReport.objects.create(\r\n+                name=data['name'].strip(),\r\n+                email=data['email'].strip().lower(),\r\n+                phone=data['phone'].strip(),\r\n+                incident_date=incident_date,\r\n+                incident_location=data['incident_location'].strip(),\r\n+                incident_type=data['incident_type'],\r\n+                description=data['description'].strip(),\r\n+                immediate_danger=data.get('immediate_danger', False),\r\n+                needs_medical_attention=data.get('needs_medical_attention', False),\r\n+                reference_code=generate_reference_code()\r\n+            )\r\n+            \r\n+            # Return success response\r\n+            return JsonResponse({\r\n+                'success': True,\r\n+                'reference_code': report.reference_code,\r\n+                'message': 'Report submitted successfully',\r\n+                'report_id': report.id\r\n+            }, status=201)\r\n+            \r\n+        except json.JSONDecodeError:\r\n+            return JsonResponse({\r\n+                'error': 'Invalid JSON data'\r\n+            }, status=400)\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'An error occurred while processing your request'\r\n+            }, status=500)\r\n+    \r\n+    def get(self, request):\r\n+        \"\"\"Get all reports (for admin use)\"\"\"\r\n+        reports = GBVReport.objects.all().order_by('-date_reported')\r\n+        \r\n+        reports_data = []\r\n+        for report in reports:\r\n+            reports_data.append({\r\n+                'id': report.id,\r\n+                'reference_code': report.reference_code,\r\n+                'name': report.name,\r\n+                'incident_type': report.get_incident_type_display(),\r\n+                'incident_location': report.incident_location,\r\n+                'incident_date': report.incident_date.isoformat(),\r\n+                'immediate_danger': report.immediate_danger,\r\n+                'needs_medical_attention': report.needs_medical_attention,\r\n+                'date_reported': report.date_reported.isoformat(),\r\n+            })\r\n+        \r\n+        return JsonResponse({\r\n+            'reports': reports_data,\r\n+            'total_count': reports.count()\r\n+        })\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportDetailView(View):\r\n+    \"\"\"Handle individual report details\"\"\"\r\n+    \r\n+    def get(self, request, report_id):\r\n+        \"\"\"Get a specific report by ID\"\"\"\r\n+        try:\r\n+            report = get_object_or_404(GBVReport, id=report_id)\r\n+            \r\n+            return JsonResponse({\r\n+                'id': report.id,\r\n+                'reference_code': report.reference_code,\r\n+                'name': report.name,\r\n+                'email': report.email,\r\n+                'phone': report.phone,\r\n+                'incident_type': report.get_incident_type_display(),\r\n+                'incident_location': report.incident_location,\r\n+                'incident_date': report.incident_date.isoformat(),\r\n+                'description': report.description,\r\n+                'immediate_danger': report.immediate_danger,\r\n+                'needs_medical_attention': report.needs_medical_attention,\r\n+                'date_reported': report.date_reported.isoformat(),\r\n+            })\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'Report not found'\r\n+            }, status=404)\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportTrackingView(View):\r\n+    \"\"\"Handle report tracking by reference code\"\"\"\r\n+    \r\n+    def get(self, request, reference_code):\r\n+        \"\"\"Track a report using reference code\"\"\"\r\n+        try:\r\n+            report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n+            \r\n+            return JsonResponse({\r\n+                'report': {\r\n+                    'reference_code': report.reference_code,\r\n+                    'status_display': 'Submitted',  # You can add status field to model later\r\n+                    'created_at': report.date_reported.isoformat(),\r\n+                    'incident_type': report.get_incident_type_display(),\r\n+                    'incident_location': report.incident_location,\r\n+                    'immediate_danger': report.immediate_danger,\r\n+                    'needs_medical_attention': report.needs_medical_attention,\r\n+                },\r\n+                'can_create_account': False  # Can be updated based on your business logic\r\n+            })\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'Invalid reference code'\r\n+            }, status=404)\r\n+\r\n+# Function-based views (alternative approach)\r\n+@csrf_exempt\r\n+@require_http_methods([\"POST\"])\r\n+def create_gbv_report(request):\r\n+    \"\"\"Alternative function-based view for creating reports\"\"\"\r\n+    try:\r\n+        data = json.loads(request.body)\r\n+        \r\n+        # Validation logic (same as above)\r\n+        required_fields = ['name', 'email', 'phone', 'incident_date', 'incident_location', 'incident_type', 'description']\r\n+        \r\n+        for field in required_fields:\r\n+            if not data.get(field):\r\n+                return JsonResponse({'error': f'{field.replace(\"_\", \" \").title()} is required'}, status=400)\r\n+        \r\n+        # Create report\r\n+        report = GBVReport.objects.create(\r\n+            name=data['name'].strip(),\r\n+            email=data['email'].strip().lower(),\r\n+            phone=data['phone'].strip(),\r\n+            incident_date=datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00')),\r\n+            incident_location=data['incident_location'].strip(),\r\n+            incident_type=data['incident_type'],\r\n+            description=data['description'].strip(),\r\n+            immediate_danger=data.get('immediate_danger', False),\r\n+            needs_medical_attention=data.get('needs_medical_attention', False),\r\n+            reference_code=generate_reference_code()\r\n+        )\r\n+        \r\n+        return JsonResponse({\r\n+            'success': True,\r\n+            'reference_code': report.reference_code,\r\n+            'message': 'Report submitted successfully'\r\n+        }, status=201)\r\n+        \r\n+    except Exception as e:\r\n+        return JsonResponse({'error': 'An error occurred'}, status=500)\r\n+\r\n+@require_http_methods([\"GET\"])\r\n+def track_gbv_report(request, reference_code):\r\n+    \"\"\"Alternative function-based view for tracking reports\"\"\"\r\n+    try:\r\n+        report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n+        \r\n+        return JsonResponse({\r\n+            'report': {\r\n+                'reference_code': report.reference_code,\r\n+                'status_display': 'Submitted',\r\n+                'created_at': report.date_reported.isoformat(),\r\n+                'incident_type': report.get_incident_type_display(),\r\n+            },\r\n+            'can_create_account': False\r\n+        })\r\n+    except:\r\n+        return JsonResponse({'error': 'Invalid reference code'}, status=404)\r\n+\r\n+# Emergency contact view\r\n+@require_http_methods([\"GET\"])\r\n+def emergency_contacts(request):\r\n+    \"\"\"Return emergency contact information\"\"\"\r\n+    return JsonResponse({\r\n+        'contacts': [\r\n+            {\r\n+                'name': 'Police',\r\n+                'number': '999',\r\n+                'type': 'emergency'\r\n+            },\r\n+            {\r\n+                'name': 'GBV Hotline',\r\n+                'number': '1195',\r\n+                'type': 'support'\r\n+            }\r\n+        ]\r\n+    })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752645061107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         code = 'GBV' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\r\n         if not GBVReport.objects.filter(reference_code=code).exists():\r\n             return code\r\n \r\n-class ReportAPIVIEW\r\n+class ReportApiView\r\n \r\n @method_decorator(csrf_exempt, name='dispatch')\r\n class GBVReportView(View):\r\n     \"\"\"Handle GBV report creation and retrieval\"\"\"\r\n"
                },
                {
                    "date": 1752645069205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,252 @@\n+from django.shortcuts import render, get_object_or_404\r\n+from django.http import JsonResponse\r\n+from django.views.decorators.csrf import csrf_exempt\r\n+from django.views.decorators.http import require_http_methods\r\n+from django.utils.decorators import method_decorator\r\n+from django.views import View\r\n+from rest_framework.viewsets import ModelViewSet\r\n+from django.core.exceptions import ValidationError\r\n+from django.core.validators import validate_email\r\n+import json\r\n+import string\r\n+import random\r\n+from datetime import datetime\r\n+from .models import GBVReport\r\n+\r\n+def generate_reference_code():\r\n+    \"\"\"Generate a unique reference code for the report\"\"\"\r\n+    while True:\r\n+        code = 'GBV' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\r\n+        if not GBVReport.objects.filter(reference_code=code).exists():\r\n+            return code\r\n+\r\n+class ReportApiView(ModelViewSet):\r\n+    \r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportView(View):\r\n+    \"\"\"Handle GBV report creation and retrieval\"\"\"\r\n+    \r\n+    def post(self, request):\r\n+        \"\"\"Create a new GBV report\"\"\"\r\n+        try:\r\n+            # Parse JSON data\r\n+            data = json.loads(request.body)\r\n+            \r\n+            # Validate required fields\r\n+            required_fields = [\r\n+                'name', 'email', 'phone', 'incident_date', \r\n+                'incident_location', 'incident_type', 'description'\r\n+            ]\r\n+            \r\n+            for field in required_fields:\r\n+                if not data.get(field):\r\n+                    return JsonResponse({\r\n+                        'error': f'{field.replace(\"_\", \" \").title()} is required'\r\n+                    }, status=400)\r\n+            \r\n+            # Validate email format\r\n+            try:\r\n+                validate_email(data['email'])\r\n+            except ValidationError:\r\n+                return JsonResponse({\r\n+                    'error': 'Please provide a valid email address'\r\n+                }, status=400)\r\n+            \r\n+            # Validate incident type\r\n+            valid_types = ['physical', 'sexual', 'emotional', 'economic', 'other']\r\n+            if data['incident_type'] not in valid_types:\r\n+                return JsonResponse({\r\n+                    'error': 'Invalid incident type'\r\n+                }, status=400)\r\n+            \r\n+            # Parse incident date\r\n+            try:\r\n+                incident_date = datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00'))\r\n+            except ValueError:\r\n+                return JsonResponse({\r\n+                    'error': 'Invalid date format'\r\n+                }, status=400)\r\n+            \r\n+            # Create the report\r\n+            report = GBVReport.objects.create(\r\n+                name=data['name'].strip(),\r\n+                email=data['email'].strip().lower(),\r\n+                phone=data['phone'].strip(),\r\n+                incident_date=incident_date,\r\n+                incident_location=data['incident_location'].strip(),\r\n+                incident_type=data['incident_type'],\r\n+                description=data['description'].strip(),\r\n+                immediate_danger=data.get('immediate_danger', False),\r\n+                needs_medical_attention=data.get('needs_medical_attention', False),\r\n+                reference_code=generate_reference_code()\r\n+            )\r\n+            \r\n+            # Return success response\r\n+            return JsonResponse({\r\n+                'success': True,\r\n+                'reference_code': report.reference_code,\r\n+                'message': 'Report submitted successfully',\r\n+                'report_id': report.id\r\n+            }, status=201)\r\n+            \r\n+        except json.JSONDecodeError:\r\n+            return JsonResponse({\r\n+                'error': 'Invalid JSON data'\r\n+            }, status=400)\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'An error occurred while processing your request'\r\n+            }, status=500)\r\n+    \r\n+    def get(self, request):\r\n+        \"\"\"Get all reports (for admin use)\"\"\"\r\n+        reports = GBVReport.objects.all().order_by('-date_reported')\r\n+        \r\n+        reports_data = []\r\n+        for report in reports:\r\n+            reports_data.append({\r\n+                'id': report.id,\r\n+                'reference_code': report.reference_code,\r\n+                'name': report.name,\r\n+                'incident_type': report.get_incident_type_display(),\r\n+                'incident_location': report.incident_location,\r\n+                'incident_date': report.incident_date.isoformat(),\r\n+                'immediate_danger': report.immediate_danger,\r\n+                'needs_medical_attention': report.needs_medical_attention,\r\n+                'date_reported': report.date_reported.isoformat(),\r\n+            })\r\n+        \r\n+        return JsonResponse({\r\n+            'reports': reports_data,\r\n+            'total_count': reports.count()\r\n+        })\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportDetailView(View):\r\n+    \"\"\"Handle individual report details\"\"\"\r\n+    \r\n+    def get(self, request, report_id):\r\n+        \"\"\"Get a specific report by ID\"\"\"\r\n+        try:\r\n+            report = get_object_or_404(GBVReport, id=report_id)\r\n+            \r\n+            return JsonResponse({\r\n+                'id': report.id,\r\n+                'reference_code': report.reference_code,\r\n+                'name': report.name,\r\n+                'email': report.email,\r\n+                'phone': report.phone,\r\n+                'incident_type': report.get_incident_type_display(),\r\n+                'incident_location': report.incident_location,\r\n+                'incident_date': report.incident_date.isoformat(),\r\n+                'description': report.description,\r\n+                'immediate_danger': report.immediate_danger,\r\n+                'needs_medical_attention': report.needs_medical_attention,\r\n+                'date_reported': report.date_reported.isoformat(),\r\n+            })\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'Report not found'\r\n+            }, status=404)\r\n+\r\n+@method_decorator(csrf_exempt, name='dispatch')\r\n+class GBVReportTrackingView(View):\r\n+    \"\"\"Handle report tracking by reference code\"\"\"\r\n+    \r\n+    def get(self, request, reference_code):\r\n+        \"\"\"Track a report using reference code\"\"\"\r\n+        try:\r\n+            report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n+            \r\n+            return JsonResponse({\r\n+                'report': {\r\n+                    'reference_code': report.reference_code,\r\n+                    'status_display': 'Submitted',  # You can add status field to model later\r\n+                    'created_at': report.date_reported.isoformat(),\r\n+                    'incident_type': report.get_incident_type_display(),\r\n+                    'incident_location': report.incident_location,\r\n+                    'immediate_danger': report.immediate_danger,\r\n+                    'needs_medical_attention': report.needs_medical_attention,\r\n+                },\r\n+                'can_create_account': False  # Can be updated based on your business logic\r\n+            })\r\n+        except Exception as e:\r\n+            return JsonResponse({\r\n+                'error': 'Invalid reference code'\r\n+            }, status=404)\r\n+\r\n+# Function-based views (alternative approach)\r\n+@csrf_exempt\r\n+@require_http_methods([\"POST\"])\r\n+def create_gbv_report(request):\r\n+    \"\"\"Alternative function-based view for creating reports\"\"\"\r\n+    try:\r\n+        data = json.loads(request.body)\r\n+        \r\n+        # Validation logic (same as above)\r\n+        required_fields = ['name', 'email', 'phone', 'incident_date', 'incident_location', 'incident_type', 'description']\r\n+        \r\n+        for field in required_fields:\r\n+            if not data.get(field):\r\n+                return JsonResponse({'error': f'{field.replace(\"_\", \" \").title()} is required'}, status=400)\r\n+        \r\n+        # Create report\r\n+        report = GBVReport.objects.create(\r\n+            name=data['name'].strip(),\r\n+            email=data['email'].strip().lower(),\r\n+            phone=data['phone'].strip(),\r\n+            incident_date=datetime.fromisoformat(data['incident_date'].replace('Z', '+00:00')),\r\n+            incident_location=data['incident_location'].strip(),\r\n+            incident_type=data['incident_type'],\r\n+            description=data['description'].strip(),\r\n+            immediate_danger=data.get('immediate_danger', False),\r\n+            needs_medical_attention=data.get('needs_medical_attention', False),\r\n+            reference_code=generate_reference_code()\r\n+        )\r\n+        \r\n+        return JsonResponse({\r\n+            'success': True,\r\n+            'reference_code': report.reference_code,\r\n+            'message': 'Report submitted successfully'\r\n+        }, status=201)\r\n+        \r\n+    except Exception as e:\r\n+        return JsonResponse({'error': 'An error occurred'}, status=500)\r\n+\r\n+@require_http_methods([\"GET\"])\r\n+def track_gbv_report(request, reference_code):\r\n+    \"\"\"Alternative function-based view for tracking reports\"\"\"\r\n+    try:\r\n+        report = get_object_or_404(GBVReport, reference_code=reference_code.upper())\r\n+        \r\n+        return JsonResponse({\r\n+            'report': {\r\n+                'reference_code': report.reference_code,\r\n+                'status_display': 'Submitted',\r\n+                'created_at': report.date_reported.isoformat(),\r\n+                'incident_type': report.get_incident_type_display(),\r\n+            },\r\n+            'can_create_account': False\r\n+        })\r\n+    except:\r\n+        return JsonResponse({'error': 'Invalid reference code'}, status=404)\r\n+\r\n+# Emergency contact view\r\n+@require_http_methods([\"GET\"])\r\n+def emergency_contacts(request):\r\n+    \"\"\"Return emergency contact information\"\"\"\r\n+    return JsonResponse({\r\n+        'contacts': [\r\n+            {\r\n+                'name': 'Police',\r\n+                'number': '999',\r\n+                'type': 'emergency'\r\n+            },\r\n+            {\r\n+                'name': 'GBV Hotline',\r\n+                'number': '1195',\r\n+                'type': 'support'\r\n+            }\r\n+        ]\r\n+    })\n\\ No newline at end of file\n"
                }
            ],
            "date": 1752559273037,
            "name": "Commit-0",
            "content": "from django.shortcuts import render\r\n\r\n# Create your views here.\r\nfrom rest_framework.decorators import api_view\r\nfrom rest_framework.response import Response\r\nfrom rest_framework import status\r\nfrom .models import GBVReport\r\nfrom .serializers import GBVReportSerializer\r\n\r\n@api_view(['POST'])\r\ndef submit_report(request):\r\n    serializer = GBVReportSerializer(data=request.data)\r\n    if serializer.is_valid():\r\n        serializer.save()\r\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n"
        }
    ]
}