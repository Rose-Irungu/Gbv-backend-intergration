{
    "sourceFile": "gbv_project/reports/serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 34,
            "patches": [
                {
                    "date": 1752559251653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752649842499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,57 @@\n from rest_framework import serializers\r\n+from django.contrib.auth import get_user_model\r\n+from django.core.mail import send_mail\r\n from .models import GBVReport\r\n+import string\r\n+import random\r\n \r\n+User = get_user_model()\r\n+\r\n class GBVReportSerializer(serializers.ModelSerializer):\r\n     class Meta:\r\n         model = GBVReport\r\n         fields = '__all__'\r\n+\r\n+    def create(self, validated_data):\r\n+        # Create GBV Report\r\n+        report = GBVReport.objects.create(**validated_data)\r\n+\r\n+        # Check if user already exists\r\n+        email = validated_data.get('email')\r\n+        if not User.objects.filter(email=email).exists():\r\n+            # Generate random password\r\n+            password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n+\r\n+            # Create user\r\n+            user = User.objects.create_user(\r\n+                username=email,\r\n+                email=email,\r\n+                password=password,\r\n+                user_type='survivor',\r\n+                phone_number=validated_data.get('phone', ''),\r\n+                first_name=validated_data.get('name', '')\r\n+            )\r\n+\r\n+            # Send credentials via email\r\n+            send_mail(\r\n+                subject=\"Your Account Has Been Created\",\r\n+                message=f\"\"\"\r\n+Hello {user.first_name},\r\n+\r\n+Your report has been received. An account has been created for you.\r\n+\r\n+Login Details:\r\n+Email: {user.email}\r\n+Password: {password}\r\n+\r\n+Please log in and update your password after your first login.\r\n+\r\n+Regards,\r\n+Support Team\r\n+                \"\"\",\r\n+                from_email=\"noreply@gbv-platform.org\",\r\n+                recipient_list=[user.email],\r\n+                fail_silently=False\r\n+            )\r\n+\r\n+        return report\r\n"
                },
                {
                    "date": 1752650286681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \r\n Regards,\r\n Support Team\r\n                 \"\"\",\r\n-                from_email=\"noreply@gbv-platform.org\",\r\n+                from_email=\"roseirungu497@gmail.com\",\r\n                 recipient_list=[user.email],\r\n                 fail_silently=False\r\n             )\r\n \r\n"
                },
                {
                    "date": 1752818002127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n             user = User.objects.create_user(\r\n                 username=email,\r\n                 email=email,\r\n                 password=password,\r\n-                user_type='survivor',\r\n+                u='survivor',\r\n                 phone_number=validated_data.get('phone', ''),\r\n                 first_name=validated_data.get('name', '')\r\n             )\r\n \r\n"
                },
                {
                    "date": 1752818009796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n             user = User.objects.create_user(\r\n                 username=email,\r\n                 email=email,\r\n                 password=password,\r\n-                u='survivor',\r\n+                role='survivor',\r\n                 phone_number=validated_data.get('phone', ''),\r\n                 first_name=validated_data.get('name', '')\r\n             )\r\n \r\n"
                },
                {
                    "date": 1753337449657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n             password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n \r\n             # Create user\r\n             user = User.objects.create_user(\r\n-                username=email,\r\n+                # username=email,\r\n                 email=email,\r\n                 password=password,\r\n                 role='survivor',\r\n                 phone_number=validated_data.get('phone', ''),\r\n"
                },
                {
                    "date": 1755846753463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n         report = GBVReport.objects.create(**validated_data)\r\n \r\n         # Check if user already exists\r\n         email = validated_data.get('email')\r\n+        \r\n         if not User.objects.filter(email=email).exists():\r\n             # Generate random password\r\n             password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n \r\n"
                },
                {
                    "date": 1755846761988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         report = GBVReport.objects.create(**validated_data)\r\n \r\n         # Check if user already exists\r\n         email = validated_data.get('email')\r\n-        \r\n+        user = \r\n         if not User.objects.filter(email=email).exists():\r\n             # Generate random password\r\n             password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n \r\n"
                },
                {
                    "date": 1755846769280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         report = GBVReport.objects.create(**validated_data)\r\n \r\n         # Check if user already exists\r\n         email = validated_data.get('email')\r\n-        user = \r\n+        user = User.objects\r\n         if not User.objects.filter(email=email).exists():\r\n             # Generate random password\r\n             password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n \r\n"
                },
                {
                    "date": 1755846777900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         report = GBVReport.objects.create(**validated_data)\r\n \r\n         # Check if user already exists\r\n         email = validated_data.get('email')\r\n-        user = User.objects\r\n+        user = User.objects.get\r\n         if not User.objects.filter(email=email).exists():\r\n             # Generate random password\r\n             password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n \r\n"
                },
                {
                    "date": 1755846783014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,58 @@\n+from rest_framework import serializers\r\n+from django.contrib.auth import get_user_model\r\n+from django.core.mail import send_mail\r\n+from .models import GBVReport\r\n+import string\r\n+import random\r\n+\r\n+User = get_user_model()\r\n+\r\n+class GBVReportSerializer(serializers.ModelSerializer):\r\n+    class Meta:\r\n+        model = GBVReport\r\n+        fields = '__all__'\r\n+\r\n+    def create(self, validated_data):\r\n+        # Create GBV Report\r\n+        report = GBVReport.objects.create(**validated_data)\r\n+\r\n+        # Check if user already exists\r\n+        email = validated_data.get('email')\r\n+        user = User.objects.get(email=)\r\n+        if not User.objects.filter(email=email).exists():\r\n+            # Generate random password\r\n+            password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n+\r\n+            # Create user\r\n+            user = User.objects.create_user(\r\n+                # username=email,\r\n+                email=email,\r\n+                password=password,\r\n+                role='survivor',\r\n+                phone_number=validated_data.get('phone', ''),\r\n+                first_name=validated_data.get('name', '')\r\n+            )\r\n+\r\n+            # Send credentials via email\r\n+            send_mail(\r\n+                subject=\"Your Account Has Been Created\",\r\n+                message=f\"\"\"\r\n+Hello {user.first_name},\r\n+\r\n+Your report has been received. An account has been created for you.\r\n+\r\n+Login Details:\r\n+Email: {user.email}\r\n+Password: {password}\r\n+\r\n+Please log in and update your password after your first login.\r\n+\r\n+Regards,\r\n+Support Team\r\n+                \"\"\",\r\n+                from_email=\"roseirungu497@gmail.com\",\r\n+                recipient_list=[user.email],\r\n+                fail_silently=False\r\n+            )\r\n+\r\n+        return report\r\n"
                },
                {
                    "date": 1755846788137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         report = GBVReport.objects.create(**validated_data)\r\n \r\n         # Check if user already exists\r\n         email = validated_data.get('email')\r\n-        user = User.objects.get(email=)\r\n+        user = User.objects.get(email=email)\r\n         if not User.objects.filter(email=email).exists():\r\n             # Generate random password\r\n             password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n \r\n@@ -55,62 +55,4 @@\n                 fail_silently=False\r\n             )\r\n \r\n         return report\r\n-from rest_framework import serializers\r\n-from django.contrib.auth import get_user_model\r\n-from django.core.mail import send_mail\r\n-from .models import GBVReport\r\n-import string\r\n-import random\r\n-\r\n-User = get_user_model()\r\n-\r\n-class GBVReportSerializer(serializers.ModelSerializer):\r\n-    class Meta:\r\n-        model = GBVReport\r\n-        fields = '__all__'\r\n-\r\n-    def create(self, validated_data):\r\n-        # Create GBV Report\r\n-        report = GBVReport.objects.create(**validated_data)\r\n-\r\n-        # Check if user already exists\r\n-        email = validated_data.get('email')\r\n-        user = User.objects.get\r\n-        if not User.objects.filter(email=email).exists():\r\n-            # Generate random password\r\n-            password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n-\r\n-            # Create user\r\n-            user = User.objects.create_user(\r\n-                # username=email,\r\n-                email=email,\r\n-                password=password,\r\n-                role='survivor',\r\n-                phone_number=validated_data.get('phone', ''),\r\n-                first_name=validated_data.get('name', '')\r\n-            )\r\n-\r\n-            # Send credentials via email\r\n-            send_mail(\r\n-                subject=\"Your Account Has Been Created\",\r\n-                message=f\"\"\"\r\n-Hello {user.first_name},\r\n-\r\n-Your report has been received. An account has been created for you.\r\n-\r\n-Login Details:\r\n-Email: {user.email}\r\n-Password: {password}\r\n-\r\n-Please log in and update your password after your first login.\r\n-\r\n-Regards,\r\n-Support Team\r\n-                \"\"\",\r\n-                from_email=\"roseirungu497@gmail.com\",\r\n-                recipient_list=[user.email],\r\n-                fail_silently=False\r\n-            )\r\n-\r\n-        return report\r\n"
                },
                {
                    "date": 1755846806877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \r\n         # Check if user already exists\r\n         email = validated_data.get('email')\r\n         user = User.objects.get(email=email)\r\n-        if not User.objects.filter(email=email).exists():\r\n+        if not :\r\n             # Generate random password\r\n             password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n \r\n             # Create user\r\n"
                },
                {
                    "date": 1755846884371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \r\n         # Check if user already exists\r\n         email = validated_data.get('email')\r\n         user = User.objects.get(email=email)\r\n-        if not :\r\n+        if not user:\r\n             # Generate random password\r\n             password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n \r\n             # Create user\r\n@@ -53,6 +53,6 @@\n                 from_email=\"roseirungu497@gmail.com\",\r\n                 recipient_list=[user.email],\r\n                 fail_silently=False\r\n             )\r\n-\r\n+        \r\n         return report\r\n"
                },
                {
                    "date": 1755846889816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,58 @@\n+from rest_framework import serializers\r\n+from django.contrib.auth import get_user_model\r\n+from django.core.mail import send_mail\r\n+from .models import GBVReport\r\n+import string\r\n+import random\r\n+\r\n+User = get_user_model()\r\n+\r\n+class GBVReportSerializer(serializers.ModelSerializer):\r\n+    class Meta:\r\n+        model = GBVReport\r\n+        fields = '__all__'\r\n+\r\n+    def create(self, validated_data):\r\n+        # Create GBV Report\r\n+        report = GBVReport.objects.create(**validated_data)\r\n+\r\n+        # Check if user already exists\r\n+        email = validated_data.get('email')\r\n+        user = User.objects.get(email=email)\r\n+        if not user:\r\n+            # Generate random password\r\n+            password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n+\r\n+            # Create user\r\n+            user = User.objects.create_user(\r\n+                # username=email,\r\n+                email=email,\r\n+                password=password,\r\n+                role='survivor',\r\n+                phone_number=validated_data.get('phone', ''),\r\n+                first_name=validated_data.get('name', '')\r\n+            )\r\n+\r\n+            # Send credentials via email\r\n+            send_mail(\r\n+                subject=\"Your Account Has Been Created\",\r\n+                message=f\"\"\"\r\n+Hello {user.first_name},\r\n+\r\n+Your report has been received. An account has been created for you.\r\n+\r\n+Login Details:\r\n+Email: {user.email}\r\n+Password: {password}\r\n+\r\n+Please log in and update your password after your first login.\r\n+\r\n+Regards,\r\n+Support Team\r\n+                \"\"\",\r\n+                from_email=\"roseirungu497@gmail.com\",\r\n+                recipient_list=[user.email],\r\n+                fail_silently=False\r\n+            )\r\n+        else:\r\n+        return report\r\n"
                },
                {
                    "date": 1755846906633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,64 +53,6 @@\n                 from_email=\"roseirungu497@gmail.com\",\r\n                 recipient_list=[user.email],\r\n                 fail_silently=False\r\n             )\r\n-        else:\r\n+        rpo\r\n         return report\r\n-from rest_framework import serializers\r\n-from django.contrib.auth import get_user_model\r\n-from django.core.mail import send_mail\r\n-from .models import GBVReport\r\n-import string\r\n-import random\r\n-\r\n-User = get_user_model()\r\n-\r\n-class GBVReportSerializer(serializers.ModelSerializer):\r\n-    class Meta:\r\n-        model = GBVReport\r\n-        fields = '__all__'\r\n-\r\n-    def create(self, validated_data):\r\n-        # Create GBV Report\r\n-        report = GBVReport.objects.create(**validated_data)\r\n-\r\n-        # Check if user already exists\r\n-        email = validated_data.get('email')\r\n-        user = User.objects.get(email=email)\r\n-        if not user:\r\n-            # Generate random password\r\n-            password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n-\r\n-            # Create user\r\n-            user = User.objects.create_user(\r\n-                # username=email,\r\n-                email=email,\r\n-                password=password,\r\n-                role='survivor',\r\n-                phone_number=validated_data.get('phone', ''),\r\n-                first_name=validated_data.get('name', '')\r\n-            )\r\n-\r\n-            # Send credentials via email\r\n-            send_mail(\r\n-                subject=\"Your Account Has Been Created\",\r\n-                message=f\"\"\"\r\n-Hello {user.first_name},\r\n-\r\n-Your report has been received. An account has been created for you.\r\n-\r\n-Login Details:\r\n-Email: {user.email}\r\n-Password: {password}\r\n-\r\n-Please log in and update your password after your first login.\r\n-\r\n-Regards,\r\n-Support Team\r\n-                \"\"\",\r\n-                from_email=\"roseirungu497@gmail.com\",\r\n-                recipient_list=[user.email],\r\n-                fail_silently=False\r\n-            )\r\n-        \r\n-        return report\r\n"
                },
                {
                    "date": 1755846913024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,58 @@\n+from rest_framework import serializers\r\n+from django.contrib.auth import get_user_model\r\n+from django.core.mail import send_mail\r\n+from .models import GBVReport\r\n+import string\r\n+import random\r\n+\r\n+User = get_user_model()\r\n+\r\n+class GBVReportSerializer(serializers.ModelSerializer):\r\n+    class Meta:\r\n+        model = GBVReport\r\n+        fields = '__all__'\r\n+\r\n+    def create(self, validated_data):\r\n+        # Create GBV Report\r\n+        report = GBVReport.objects.create(**validated_data)\r\n+\r\n+        # Check if user already exists\r\n+        email = validated_data.get('email')\r\n+        user = User.objects.get(email=email)\r\n+        if not user:\r\n+            # Generate random password\r\n+            password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n+\r\n+            # Create user\r\n+            user = User.objects.create_user(\r\n+                # username=email,\r\n+                email=email,\r\n+                password=password,\r\n+                role='survivor',\r\n+                phone_number=validated_data.get('phone', ''),\r\n+                first_name=validated_data.get('name', '')\r\n+            )\r\n+\r\n+            # Send credentials via email\r\n+            send_mail(\r\n+                subject=\"Your Account Has Been Created\",\r\n+                message=f\"\"\"\r\n+Hello {user.first_name},\r\n+\r\n+Your report has been received. An account has been created for you.\r\n+\r\n+Login Details:\r\n+Email: {user.email}\r\n+Password: {password}\r\n+\r\n+Please log in and update your password after your first login.\r\n+\r\n+Regards,\r\n+Support Team\r\n+                \"\"\",\r\n+                from_email=\"roseirungu497@gmail.com\",\r\n+                recipient_list=[user.email],\r\n+                fail_silently=False\r\n+            )\r\n+        report = \r\n+        return report\r\n"
                },
                {
                    "date": 1755846920177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,64 +53,6 @@\n                 from_email=\"roseirungu497@gmail.com\",\r\n                 recipient_list=[user.email],\r\n                 fail_silently=False\r\n             )\r\n-        report = \r\n+        report = GBVReport.objects\r\n         return report\r\n-from rest_framework import serializers\r\n-from django.contrib.auth import get_user_model\r\n-from django.core.mail import send_mail\r\n-from .models import GBVReport\r\n-import string\r\n-import random\r\n-\r\n-User = get_user_model()\r\n-\r\n-class GBVReportSerializer(serializers.ModelSerializer):\r\n-    class Meta:\r\n-        model = GBVReport\r\n-        fields = '__all__'\r\n-\r\n-    def create(self, validated_data):\r\n-        # Create GBV Report\r\n-        report = GBVReport.objects.create(**validated_data)\r\n-\r\n-        # Check if user already exists\r\n-        email = validated_data.get('email')\r\n-        user = User.objects.get(email=email)\r\n-        if not user:\r\n-            # Generate random password\r\n-            password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n-\r\n-            # Create user\r\n-            user = User.objects.create_user(\r\n-                # username=email,\r\n-                email=email,\r\n-                password=password,\r\n-                role='survivor',\r\n-                phone_number=validated_data.get('phone', ''),\r\n-                first_name=validated_data.get('name', '')\r\n-            )\r\n-\r\n-            # Send credentials via email\r\n-            send_mail(\r\n-                subject=\"Your Account Has Been Created\",\r\n-                message=f\"\"\"\r\n-Hello {user.first_name},\r\n-\r\n-Your report has been received. An account has been created for you.\r\n-\r\n-Login Details:\r\n-Email: {user.email}\r\n-Password: {password}\r\n-\r\n-Please log in and update your password after your first login.\r\n-\r\n-Regards,\r\n-Support Team\r\n-                \"\"\",\r\n-                from_email=\"roseirungu497@gmail.com\",\r\n-                recipient_list=[user.email],\r\n-                fail_silently=False\r\n-            )\r\n-        rpo\r\n-        return report\r\n"
                },
                {
                    "date": 1755846928699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,6 +53,6 @@\n                 from_email=\"roseirungu497@gmail.com\",\r\n                 recipient_list=[user.email],\r\n                 fail_silently=False\r\n             )\r\n-        report = GBVReport.objects\r\n+        report = GBVReport.objects.create(repor)\r\n         return report\r\n"
                },
                {
                    "date": 1755846934530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,58 @@\n+from rest_framework import serializers\r\n+from django.contrib.auth import get_user_model\r\n+from django.core.mail import send_mail\r\n+from .models import GBVReport\r\n+import string\r\n+import random\r\n+\r\n+User = get_user_model()\r\n+\r\n+class GBVReportSerializer(serializers.ModelSerializer):\r\n+    class Meta:\r\n+        model = GBVReport\r\n+        fields = '__all__'\r\n+\r\n+    def create(self, validated_data):\r\n+        # Create GBV Report\r\n+        report = GBVReport.objects.create(**validated_data)\r\n+\r\n+        # Check if user already exists\r\n+        email = validated_data.get('email')\r\n+        user = User.objects.get(email=email)\r\n+        if not user:\r\n+            # Generate random password\r\n+            password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n+\r\n+            # Create user\r\n+            user = User.objects.create_user(\r\n+                # username=email,\r\n+                email=email,\r\n+                password=password,\r\n+                role='survivor',\r\n+                phone_number=validated_data.get('phone', ''),\r\n+                first_name=validated_data.get('name', '')\r\n+            )\r\n+\r\n+            # Send credentials via email\r\n+            send_mail(\r\n+                subject=\"Your Account Has Been Created\",\r\n+                message=f\"\"\"\r\n+Hello {user.first_name},\r\n+\r\n+Your report has been received. An account has been created for you.\r\n+\r\n+Login Details:\r\n+Email: {user.email}\r\n+Password: {password}\r\n+\r\n+Please log in and update your password after your first login.\r\n+\r\n+Regards,\r\n+Support Team\r\n+                \"\"\",\r\n+                from_email=\"roseirungu497@gmail.com\",\r\n+                recipient_list=[user.email],\r\n+                fail_silently=False\r\n+            )\r\n+        report = GBVReport.objects.create(reporter=user)\r\n+        return report\r\n"
                },
                {
                    "date": 1755846940843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,64 +53,6 @@\n                 from_email=\"roseirungu497@gmail.com\",\r\n                 recipient_list=[user.email],\r\n                 fail_silently=False\r\n             )\r\n-        report = GBVReport.objects.create(reporter=user)\r\n+        report = GBVReport.objects.create(reporter=user, **)\r\n         return report\r\n-from rest_framework import serializers\r\n-from django.contrib.auth import get_user_model\r\n-from django.core.mail import send_mail\r\n-from .models import GBVReport\r\n-import string\r\n-import random\r\n-\r\n-User = get_user_model()\r\n-\r\n-class GBVReportSerializer(serializers.ModelSerializer):\r\n-    class Meta:\r\n-        model = GBVReport\r\n-        fields = '__all__'\r\n-\r\n-    def create(self, validated_data):\r\n-        # Create GBV Report\r\n-        report = GBVReport.objects.create(**validated_data)\r\n-\r\n-        # Check if user already exists\r\n-        email = validated_data.get('email')\r\n-        user = User.objects.get(email=email)\r\n-        if not user:\r\n-            # Generate random password\r\n-            password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n-\r\n-            # Create user\r\n-            user = User.objects.create_user(\r\n-                # username=email,\r\n-                email=email,\r\n-                password=password,\r\n-                role='survivor',\r\n-                phone_number=validated_data.get('phone', ''),\r\n-                first_name=validated_data.get('name', '')\r\n-            )\r\n-\r\n-            # Send credentials via email\r\n-            send_mail(\r\n-                subject=\"Your Account Has Been Created\",\r\n-                message=f\"\"\"\r\n-Hello {user.first_name},\r\n-\r\n-Your report has been received. An account has been created for you.\r\n-\r\n-Login Details:\r\n-Email: {user.email}\r\n-Password: {password}\r\n-\r\n-Please log in and update your password after your first login.\r\n-\r\n-Regards,\r\n-Support Team\r\n-                \"\"\",\r\n-                from_email=\"roseirungu497@gmail.com\",\r\n-                recipient_list=[user.email],\r\n-                fail_silently=False\r\n-            )\r\n-        report = GBVReport.objects.create(repor)\r\n-        return report\r\n"
                },
                {
                    "date": 1755846951535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,55 @@\n+from rest_framework import serializers\r\n+from django.contrib.auth import get_user_model\r\n+from django.core.mail import send_mail\r\n+from .models import GBVReport\r\n+import string\r\n+import random\r\n+\r\n+User = get_user_model()\r\n+\r\n+class GBVReportSerializer(serializers.ModelSerializer):\r\n+    class Meta:\r\n+        model = GBVReport\r\n+        fields = '__all__'\r\n+\r\n+    def create(self, validated_data):\r\n+        # Check if user already exists\r\n+        email = validated_data.get('email')\r\n+        user = User.objects.get(email=email)\r\n+        if not user:\r\n+            # Generate random password\r\n+            password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n+\r\n+            # Create user\r\n+            user = User.objects.create_user(\r\n+                # username=email,\r\n+                email=email,\r\n+                password=password,\r\n+                role='survivor',\r\n+                phone_number=validated_data.get('phone', ''),\r\n+                first_name=validated_data.get('name', '')\r\n+            )\r\n+\r\n+            # Send credentials via email\r\n+            send_mail(\r\n+                subject=\"Your Account Has Been Created\",\r\n+                message=f\"\"\"\r\n+Hello {user.first_name},\r\n+\r\n+Your report has been received. An account has been created for you.\r\n+\r\n+Login Details:\r\n+Email: {user.email}\r\n+Password: {password}\r\n+\r\n+Please log in and update your password after your first login.\r\n+\r\n+Regards,\r\n+Support Team\r\n+                \"\"\",\r\n+                from_email=\"roseirungu497@gmail.com\",\r\n+                recipient_list=[user.email],\r\n+                fail_silently=False\r\n+            )\r\n+        report = GBVReport.objects.create(reporter=user, **validated_data)\r\n+        return report\r\n"
                },
                {
                    "date": 1755847093426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,84 +30,8 @@\n                 first_name=validated_data.get('name', '')\r\n             )\r\n \r\n             # Send credentials via email\r\n-            send_mail(\r\n-                subject=\"Your Account Has Been Created\",\r\n-                message=f\"\"\"\r\n-Hello {user.first_name},\r\n-\r\n-Your report has been received. An account has been created for you.\r\n-\r\n-Login Details:\r\n-Email: {user.email}\r\n-Password: {password}\r\n-\r\n-Please log in and update your password after your first login.\r\n-\r\n-Regards,\r\n-Support Team\r\n-                \"\"\",\r\n-                from_email=\"roseirungu497@gmail.com\",\r\n-                recipient_list=[user.email],\r\n-                fail_silently=False\r\n+            ail_silently=False\r\n             )\r\n         report = GBVReport.objects.create(reporter=user, **validated_data)\r\n         return report\r\n-from rest_framework import serializers\r\n-from django.contrib.auth import get_user_model\r\n-from django.core.mail import send_mail\r\n-from .models import GBVReport\r\n-import string\r\n-import random\r\n-\r\n-User = get_user_model()\r\n-\r\n-class GBVReportSerializer(serializers.ModelSerializer):\r\n-    class Meta:\r\n-        model = GBVReport\r\n-        fields = '__all__'\r\n-\r\n-    def create(self, validated_data):\r\n-        # Create GBV Report\r\n-        report = GBVReport.objects.create(**validated_data)\r\n-\r\n-        # Check if user already exists\r\n-        email = validated_data.get('email')\r\n-        user = User.objects.get(email=email)\r\n-        if not user:\r\n-            # Generate random password\r\n-            password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n-\r\n-            # Create user\r\n-            user = User.objects.create_user(\r\n-                # username=email,\r\n-                email=email,\r\n-                password=password,\r\n-                role='survivor',\r\n-                phone_number=validated_data.get('phone', ''),\r\n-                first_name=validated_data.get('name', '')\r\n-            )\r\n-\r\n-            # Send credentials via email\r\n-            send_mail(\r\n-                subject=\"Your Account Has Been Created\",\r\n-                message=f\"\"\"\r\n-Hello {user.first_name},\r\n-\r\n-Your report has been received. An account has been created for you.\r\n-\r\n-Login Details:\r\n-Email: {user.email}\r\n-Password: {password}\r\n-\r\n-Please log in and update your password after your first login.\r\n-\r\n-Regards,\r\n-Support Team\r\n-                \"\"\",\r\n-                from_email=\"roseirungu497@gmail.com\",\r\n-                recipient_list=[user.email],\r\n-                fail_silently=False\r\n-            )\r\n-        report = GBVReport.objects.create(reporter=user, **)\r\n-        return report\r\n"
                },
                {
                    "date": 1755847104871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+from rest_framework import serializers\r\n+from django.contrib.auth import get_user_model\r\n+from django.core.mail import send_mail\r\n+from .models import GBVReport\r\n+import string\r\n+import random\r\n+\r\n+User = get_user_model()\r\n+\r\n+class GBVReportSerializer(serializers.ModelSerializer):\r\n+    class Meta:\r\n+        model = GBVReport\r\n+        fields = '__all__'\r\n+\r\n+    def create(self, validated_data):\r\n+        # Check if user already exists\r\n+        email = validated_data.get('email')\r\n+        user = User.objects.get(email=email)\r\n+        if not user:\r\n+            # Generate random password\r\n+            password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n+\r\n+            # Create user\r\n+            user = User.objects.create_user(\r\n+                # username=email,\r\n+                email=email,\r\n+                password=password,\r\n+                role='survivor',\r\n+                phone_number=validated_data.get('phone', ''),\r\n+                first_name=validated_data.get('name', '')\r\n+            )\r\n+\r\n+            # Send credentials via email\r\n+            \r\n+        report = GBVReport.objects.create(reporter=user, **validated_data)\r\n+        return report\r\n"
                },
                {
                    "date": 1755847117838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,62 +12,20 @@\n         model = GBVReport\r\n         fields = '__all__'\r\n \r\n     def create(self, validated_data):\r\n-        # Check if user already exists\r\n-        email = validated_data.get('email')\r\n-        user = User.objects.get(email=email)\r\n-        if not user:\r\n-            # Generate random password\r\n-            password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n+        user, created = User.objects.get_or_create(\r\n+    email=email,\r\n+    defaults={\r\n+        \"password\": ''.join(random.choices(string.ascii_letters + string.digits, k=10)),\r\n+        \"role\": \"survivor\",\r\n+        \"phone_number\": validated_data.get(\"phone\", \"\"),\r\n+        \"first_name\": validated_data.get(\"name\", \"\")\r\n+    }\r\n+)\r\n \r\n-            # Create user\r\n-            user = User.objects.create_user(\r\n-                # username=email,\r\n-                email=email,\r\n-                password=password,\r\n-                role='survivor',\r\n-                phone_number=validated_data.get('phone', ''),\r\n-                first_name=validated_data.get('name', '')\r\n-            )\r\n+if created:\r\n+    send_mail(...)  # send creds only for new users\r\n \r\n-            # Send credentials via email\r\n-            \r\n-        report = GBVReport.objects.create(reporter=user, **validated_data)\r\n-        return report\r\n-from rest_framework import serializers\r\n-from django.contrib.auth import get_user_model\r\n-from django.core.mail import send_mail\r\n-from .models import GBVReport\r\n-import string\r\n-import random\r\n+report = GBVReport.objects.create(reporter=user, **validated_data)\r\n+return report\r\n \r\n-User = get_user_model()\r\n-\r\n-class GBVReportSerializer(serializers.ModelSerializer):\r\n-    class Meta:\r\n-        model = GBVReport\r\n-        fields = '__all__'\r\n-\r\n-    def create(self, validated_data):\r\n-        # Check if user already exists\r\n-        email = validated_data.get('email')\r\n-        user = User.objects.get(email=email)\r\n-        if not user:\r\n-            # Generate random password\r\n-            password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n-\r\n-            # Create user\r\n-            user = User.objects.create_user(\r\n-                # username=email,\r\n-                email=email,\r\n-                password=password,\r\n-                role='survivor',\r\n-                phone_number=validated_data.get('phone', ''),\r\n-                first_name=validated_data.get('name', '')\r\n-            )\r\n-\r\n-            # Send credentials via email\r\n-            ail_silently=False\r\n-            )\r\n-        report = GBVReport.objects.create(reporter=user, **validated_data)\r\n-        return report\r\n"
                },
                {
                    "date": 1755847133827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,19 +13,19 @@\n         fields = '__all__'\r\n \r\n     def create(self, validated_data):\r\n         user, created = User.objects.get_or_create(\r\n-    email=email,\r\n-    defaults={\r\n-        \"password\": ''.join(random.choices(string.ascii_letters + string.digits, k=10)),\r\n-        \"role\": \"survivor\",\r\n-        \"phone_number\": validated_data.get(\"phone\", \"\"),\r\n-        \"first_name\": validated_data.get(\"name\", \"\")\r\n-    }\r\n-)\r\n+        email=email,\r\n+        defaults={\r\n+            \"password\": ''.join(random.choices(string.ascii_letters + string.digits, k=10)),\r\n+            \"role\": \"survivor\",\r\n+            \"phone_number\": validated_data.get(\"phone\", \"\"),\r\n+            \"first_name\": validated_data.get(\"name\", \"\")\r\n+        }\r\n+    )\r\n \r\n-if created:\r\n-    send_mail(...)  # send creds only for new users\r\n+    if created:\r\n+        send_mail(...)  # send creds only for new users\r\n \r\n-report = GBVReport.objects.create(reporter=user, **validated_data)\r\n-return report\r\n+    report = GBVReport.objects.create(reporter=user, **validated_data)\r\n+    return report\r\n \r\n"
                },
                {
                    "date": 1755847156204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,19 +13,38 @@\n         fields = '__all__'\r\n \r\n     def create(self, validated_data):\r\n         user, created = User.objects.get_or_create(\r\n-        email=email,\r\n-        defaults={\r\n-            \"password\": ''.join(random.choices(string.ascii_letters + string.digits, k=10)),\r\n-            \"role\": \"survivor\",\r\n-            \"phone_number\": validated_data.get(\"phone\", \"\"),\r\n-            \"first_name\": validated_data.get(\"name\", \"\")\r\n-        }\r\n-    )\r\n+            email=email,\r\n+            defaults={\r\n+                \"password\": ''.join(random.choices(string.ascii_letters + string.digits, k=10)),\r\n+                \"role\": \"survivor\",\r\n+                \"phone_number\": validated_data.get(\"phone\", \"\"),\r\n+                \"first_name\": validated_data.get(\"name\", \"\")\r\n+            }\r\n+        )\r\n \r\n-    if created:\r\n-        send_mail(...)  # send creds only for new users\r\n+        if created:\r\n+            send_mail(\r\n+                subject=\"Your Account Has Been Created\",\r\n+                message=f\"\"\"\r\n+Hello {user.first_name},\r\n \r\n-    report = GBVReport.objects.create(reporter=user, **validated_data)\r\n-    return report\r\n+Your report has been received. An account has been created for you.\r\n \r\n+Login Details:\r\n+Email: {user.email}\r\n+Password: {password}\r\n+\r\n+Please log in and update your password after your first login.\r\n+\r\n+Regards,\r\n+Support Team\r\n+                \"\"\",\r\n+                from_email=\"roseirungu497@gmail.com\",\r\n+                recipient_list=[user.email],\r\n+                fail_silently=False\r\n+            )  # send creds only for new users\r\n+\r\n+        report = GBVReport.objects.create(reporter=user, **validated_data)\r\n+        return report\r\n+\r\n"
                },
                {
                    "date": 1755847201487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n         model = GBVReport\r\n         fields = '__all__'\r\n \r\n     def create(self, validated_data):\r\n+        \r\n         user, created = User.objects.get_or_create(\r\n             email=email,\r\n             defaults={\r\n                 \"password\": ''.join(random.choices(string.ascii_letters + string.digits, k=10)),\r\n"
                },
                {
                    "date": 1755847208150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,10 @@\n         model = GBVReport\r\n         fields = '__all__'\r\n \r\n     def create(self, validated_data):\r\n-        \r\n+        password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\r\n+        email = validated_data.get('email')\r\n         user, created = User.objects.get_or_create(\r\n             email=email,\r\n             defaults={\r\n                 \"password\": ''.join(random.choices(string.ascii_letters + string.digits, k=10)),\r\n"
                },
                {
                    "date": 1755847299205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n                 \"password\": ''.join(random.choices(string.ascii_letters + string.digits, k=10)),\r\n                 \"role\": \"survivor\",\r\n                 \"phone_number\": validated_data.get(\"phone\", \"\"),\r\n                 \"first_name\": validated_data.get(\"name\", \"\")\r\n+                \"first_name\": validated_data.get(\"name\", \"\")\r\n             }\r\n         )\r\n \r\n         if created:\r\n"
                },
                {
                    "date": 1755847310065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,10 @@\n             defaults={\r\n                 \"password\": ''.join(random.choices(string.ascii_letters + string.digits, k=10)),\r\n                 \"role\": \"survivor\",\r\n                 \"phone_number\": validated_data.get(\"phone\", \"\"),\r\n+                \"first_name\": validated_data.get(\"firstname\", \"\"),\r\n                 \"first_name\": validated_data.get(\"name\", \"\")\r\n-                \"first_name\": validated_data.get(\"name\", \"\")\r\n             }\r\n         )\r\n \r\n         if created:\r\n"
                },
                {
                    "date": 1755847315155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,10 @@\n             defaults={\r\n                 \"password\": ''.join(random.choices(string.ascii_letters + string.digits, k=10)),\r\n                 \"role\": \"survivor\",\r\n                 \"phone_number\": validated_data.get(\"phone\", \"\"),\r\n-                \"first_name\": validated_data.get(\"firstname\", \"\"),\r\n-                \"first_name\": validated_data.get(\"name\", \"\")\r\n+                \"first_name\": validated_data.get(\"first_name\", \"\"),\r\n+                \"first_name\": validated_data.get(\"lastname\", \"\")\r\n             }\r\n         )\r\n \r\n         if created:\r\n"
                },
                {
                    "date": 1755847321940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n                 \"password\": ''.join(random.choices(string.ascii_letters + string.digits, k=10)),\r\n                 \"role\": \"survivor\",\r\n                 \"phone_number\": validated_data.get(\"phone\", \"\"),\r\n                 \"first_name\": validated_data.get(\"first_name\", \"\"),\r\n-                \"first_name\": validated_data.get(\"lastname\", \"\")\r\n+                \"_name\": validated_data.get(\"last_name\", \"\")\r\n             }\r\n         )\r\n \r\n         if created:\r\n"
                },
                {
                    "date": 1755847358393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,13 +17,13 @@\n         email = validated_data.get('email')\r\n         user, created = User.objects.get_or_create(\r\n             email=email,\r\n             defaults={\r\n-                \"password\": ''.join(random.choices(string.ascii_letters + string.digits, k=10)),\r\n+                \"password\": ,\r\n                 \"role\": \"survivor\",\r\n                 \"phone_number\": validated_data.get(\"phone\", \"\"),\r\n                 \"first_name\": validated_data.get(\"first_name\", \"\"),\r\n-                \"_name\": validated_data.get(\"last_name\", \"\")\r\n+                \"last_name\": validated_data.get(\"last_name\", \"\")\r\n             }\r\n         )\r\n \r\n         if created:\r\n"
                },
                {
                    "date": 1755847375887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         email = validated_data.get('email')\r\n         user, created = User.objects.get_or_create(\r\n             email=email,\r\n             defaults={\r\n-                \"password\": ,\r\n+                \"password\": password,\r\n                 \"role\": \"survivor\",\r\n                 \"phone_number\": validated_data.get(\"phone\", \"\"),\r\n                 \"first_name\": validated_data.get(\"first_name\", \"\"),\r\n                 \"last_name\": validated_data.get(\"last_name\", \"\")\r\n@@ -45,9 +45,9 @@\n                 \"\"\",\r\n                 from_email=\"roseirungu497@gmail.com\",\r\n                 recipient_list=[user.email],\r\n                 fail_silently=False\r\n-            )  # send creds only for new users\r\n+            ) \r\n \r\n         report = GBVReport.objects.create(reporter=user, **validated_data)\r\n         return report\r\n \r\n"
                }
            ],
            "date": 1752559251653,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\r\nfrom .models import GBVReport\r\n\r\nclass GBVReportSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = GBVReport\r\n        fields = '__all__'\r\n"
        }
    ]
}